
##########============================================================
##perl.properties
##########============================================================
# Define SciTE settings for Perl, Bash, and AWK files.


file.patterns.perl=*.pl;*.pm;*.pod
file.patterns.bash=*.sh;*.bsh;configure;*.ksh
file.patterns.awk=*.awk

shbang.perl=pl
shbang.sh=sh
shbang.bash=sh

shbang.gawk=awk
shbang.nawk=awk
shbang.mawk=awk

filter.perl=Perl (pl pm)|$(file.patterns.perl)|
filter.bash=Bash (sh bsh)|$(file.patterns.bash)|
filter.awk=GAWK  (awk)|$(file.patterns.awk)|

lexer.$(file.patterns.perl)=perl
lexer.$(file.patterns.bash)=bash
lexer.$(file.patterns.awk)=perl

keywords.$(file.patterns.perl)=\
NULL __FILE__ __LINE__ __PACKAGE__ __DATA__ __END__ AUTOLOAD \
BEGIN CORE DESTROY END EQ GE GT INIT LE LT NE CHECK abs accept \
alarm and atan2 bind binmode bless caller chdir chmod chomp chop \
chown chr chroot close closedir cmp connect continue cos crypt \
dbmclose dbmopen defined delete die do dump each else elsif endgrent \
endhostent endnetent endprotoent endpwent endservent eof eq eval \
exec exists exit exp fcntl fileno flock for foreach fork format \
formline ge getc getgrent getgrgid getgrnam gethostbyaddr gethostbyname \
gethostent getlogin getnetbyaddr getnetbyname getnetent getpeername \
getpgrp getppid getpriority getprotobyname getprotobynumber getprotoent \
getpwent getpwnam getpwuid getservbyname getservbyport getservent \
getsockname getsockopt glob gmtime goto grep gt hex if index \
int ioctl join keys kill last lc lcfirst le length link listen \
local localtime lock log lstat lt map mkdir msgctl msgget msgrcv \
msgsnd my ne next no not oct open opendir or ord our pack package \
pipe pop pos print printf prototype push quotemeta qu \
rand read readdir readline readlink readpipe recv redo \
ref rename require reset return reverse rewinddir rindex rmdir \
scalar seek seekdir select semctl semget semop send setgrent \
sethostent setnetent setpgrp setpriority setprotoent setpwent \
setservent setsockopt shift shmctl shmget shmread shmwrite shutdown \
sin sleep socket socketpair sort splice split sprintf sqrt srand \
stat study sub substr symlink syscall sysopen sysread sysseek \
system syswrite tell telldir tie tied time times truncate \
uc ucfirst umask undef unless unlink unpack unshift untie until \
use utime values vec wait waitpid wantarray warn while write \
xor \
given when default say state UNITCHECK

keywords.$(file.patterns.awk)=\
BEGIN END \
if else while do for in break continue delete exit function return \
print printf sprintf \
system close getline next nextfile fflush \
atan2 cos exp int log rand sin sqrt srand \
asort asorti gensub sub gsub index length match split \
strtonum substr tolower toupper \
mktime strftime systime \
and compl lshift or rshift xor \
bindtextdomain dcgettext dcngettext \
ARGC ARGIND ARGV BINMODE CONVFMT ENVIRON ERRNO FIELDWIDTHS \
FILENAME FNR FS IGNORECASE LINT NF NR OFMT OFS ORS PROCINFO \
RS RT RSTART RLENGTH SUBSEP TEXTDOMAIN


comment.block.awk=#~
block.start.$(file.patterns.awk)=10 {
block.end.$(file.patterns.awk)=10 }


word.characters.$(file.patterns.perl)=$(chars.alpha)$(chars.numeric)_$@%&

comment.block.perl=#~
block.start.$(file.patterns.perl)=10 {
block.end.$(file.patterns.perl)=10 }

colour.perl.heredoc=$(colour.embedded.comment)

#fold.perl.package=1
#fold.perl.pod=1

# generic keywords
bash_keywords1=alias \
ar asa awk banner basename bash bc bdiff break \
bunzip2 bzip2 cal calendar case cat cc cd chmod cksum \
clear cmp col comm compress continue cp cpio crypt \
csplit ctags cut date dc dd declare deroff dev df diff diff3 \
dircmp dirname do done du echo ed egrep elif else env \
esac eval ex exec exit expand export expr false fc \
fgrep fi file find fmt fold for function functions \
getconf getopt getopts grep gres hash head help \
history iconv id if in integer jobs join kill local lc \
let line ln logname look ls m4 mail mailx make \
man mkdir more mt mv newgrp nl nm nohup ntps od \
pack paste patch pathchk pax pcat perl pg pr print \
printf ps pwd read readonly red return rev rm rmdir \
sed select set sh shift size sleep sort spell \
split start stop strings strip stty sum suspend \
sync tail tar tee test then time times touch tr \
trap true tsort tty type typeset ulimit umask unalias \
uname uncompress unexpand uniq unpack unset until \
uudecode uuencode vi vim vpax wait wc whence which \
while who wpaste wstart xargs zcat

# additional keywords from coreutils
bash_keywords2=chgrp chown chroot dir dircolors \
factor groups hostid install link md5sum mkfifo \
mknod nice pinky printenv ptx readlink seq \
sha1sum shred stat su tac unlink users vdir whoami yes

keywords.$(file.patterns.bash)=$(bash_keywords1) $(bash_keywords2)

word.characters.$(file.patterns.bash)=$(chars.alpha)$(chars.numeric)_$@%&

comment.block.bash=#~

colour.bash.heredoc=$(colour.embedded.comment)

# Perl styles
# The perl styles are set to lots of different foreground and background colours as an
# aid to debugging SciTE's Perl lexer - not because this is a good way to display Perl.
style.perl.32=
# White space
style.perl.0=fore:#808080,$(font.base)
# Error
style.perl.1=$(colour.error)
# Comment
style.perl.2=$(colour.code.comment.box),$(font.code.comment.box)
# POD: = at beginning of line
style.perl.3=fore:#004000,back:#E0FFE0,$(font.text),eolfilled
# Number
style.perl.4=$(colour.number)
# Keyword
style.perl.5=$(colour.keyword),bold
# Double quoted string
style.perl.6=$(colour.string),$(font.monospace)
# Single quoted string
style.perl.7=$(colour.char),$(font.monospace)
# Symbols / Punctuation. Currently not used by LexPerl.
style.perl.8=$(colour.notused),$(font.notused)
# Preprocessor. Currently not used by LexPerl.
style.perl.9=$(colour.notused),$(font.notused)
# Operators
style.perl.10=$(colour.operator),bold
# Identifiers (functions, etc.)
style.perl.11=fore:#000000
# Scalars: $var
style.perl.12=fore:#000000,back:#FFE0E0
# Array: @var
style.perl.13=fore:#000000,back:#FFFFE0
# Hash: %var
style.perl.14=fore:#000000,back:#FFE0FF
# Symbol table: *var
style.perl.15=fore:#000000,back:#E0E0E0
# Regex: /re/ or m{re}
style.perl.17=fore:#000000,back:#A0FFA0
# Substitution: s/re/ore/
style.perl.18=fore:#000000,back:#F0E080
# Long Quote (qq, qr, qw, qx) -- obsolete: replaced by qq, qx, qr, qw
style.perl.19=fore:#FFFF00,back:#8080A0
# Back Ticks
style.perl.20=fore:#FFFF00,back:#A08080
# Data Section: __DATA__ or __END__ at beginning of line
style.perl.21=fore:#600000,back:#FFF0D8,eolfilled
# Here-doc (delimiter)
style.perl.22=fore:#000000,back:#DDD0DD
# Here-doc (single quoted, q)
style.perl.23=fore:#7F007F,back:#DDD0DD,eolfilled,notbold
# Here-doc (double quoted, qq)
style.perl.24=fore:#7F007F,back:#DDD0DD,eolfilled,bold
# Here-doc (back ticks, qx)
style.perl.25=fore:#7F007F,back:#DDD0DD,eolfilled,italics
# Single quoted string, generic
style.perl.26=fore:#7F007F,$(font.monospace),notbold
# qq = Double quoted string
style.perl.27=$(style.perl.6)
# qx = Back ticks
style.perl.28=$(style.perl.20)
# qr = Regex
style.perl.29=$(style.perl.17)
# qw = Array
style.perl.30=$(style.perl.13)
# POD: verbatim paragraphs
style.perl.31=fore:#004000,back:#C0FFC0,$(font.monospace),eolfilled
# subroutine prototype
style.perl.40=$(style.perl.10),italics
# format identifier
style.perl.41=fore:#C000C0,bold
# format body
style.perl.42=fore:#C000C0,back:#FFF0FF,eolfilled
# Braces are only matched in operator style
braces.perl.style=10

# Bash styles
# The bash styles are set to lots of different foreground and background colours as an
# aid to debugging SciTE's Bash lexer - not because this is a good way to display Bash.
style.bash.32=
# White space
style.bash.0=fore:#808080,$(font.base)
# Error
style.bash.1=$(colour.error)
# Comment
style.bash.2=$(colour.code.comment.box),$(font.code.comment.box)
# Number
style.bash.3=$(colour.number)
# Keyword
style.bash.4=$(colour.keyword),bold
# Double quoted string
style.bash.5=$(colour.string),$(font.monospace)
# Single quoted string
style.bash.6=$(colour.char),$(font.monospace)
# Operators
style.bash.7=$(colour.operator),bold
# Identifiers (functions, etc.)
style.bash.8=fore:#000000
# Scalars: $var
style.bash.9=fore:#000000,back:#FFE0E0
# Parameter expansion: ${var}
style.bash.10=fore:#000000,back:#FFFFE0
# Back Ticks
style.bash.11=fore:#FFFF00,back:#A08080
# Here-doc (delimiter)
style.bash.12=fore:#000000,back:#DDD0DD
# Here-doc (single quoted, q)
style.bash.13=fore:#7F007F,back:#DDD0DD,eolfilled,notbold
# Braces are only matched in operator style
braces.bash.style=7

command.go.$(file.patterns.awk)=gawk -f $(FileNameExt)

command.go.$(file.patterns.perl)=perl -w $(FileNameExt)

command.compile.$(file.patterns.perl)=perl -c -w $(FileNameExt)
command.name.0.$(file.patterns.perl)=Lint
command.0.$(file.patterns.perl)=perl -MO=Lint,all $(FileNameExt)

command.name.1.$(file.patterns.perl)=Check Syntax
command.1.$(file.patterns.perl)=perl -cw $(FileNameExt)

command.name.2.$(file.patterns.perl)=Code Profiler
command.2.$(file.patterns.perl)=perl -d:DProf $(FileNameExt)

command.name.3.$(file.patterns.perl)=Profiler Parser
command.3.$(file.patterns.perl)=C:\Perl\bin\dprofpp.bat $(FileDir)\tmon.out


##########============================================================
##lua.properties
##########===========================================================
# Define SciTE settings for Lua files.

file.patterns.lua=*.lua

shbang.lua=lua

filter.lua=Lua (lua)|$(file.patterns.lua)|

lexer.$(file.patterns.lua)=lua

word.chars.lua=$(chars.alpha)$(chars.numeric)$(chars.accented)_%
word.characters.$(file.patterns.lua)=$(word.chars.lua)

keywordclass.lua=and break do else elseif end false for function if \
in local nil not or repeat return then true until while
keywords.$(file.patterns.lua)=$(keywordclass.lua)

# Basic Functions (in both versions of Lua)
keywordclass2.lua=_VERSION assert collectgarbage dofile error gcinfo loadfile loadstring \
print rawget rawset require tonumber tostring type unpack

#### Lua 4.0
# Basic Functions
keywordclass2.lua4=_ALERT _ERRORMESSAGE _INPUT _PROMPT _OUTPUT \
_STDERR _STDIN _STDOUT call dostring foreach foreachi getn globals newtype \
sort tinsert tremove

# String Manipulation & Mathematical Functions
keywordclass3.lua4=abs acos asin atan atan2 ceil cos deg exp \
floor format frexp gsub ldexp log log10 max min mod rad random randomseed \
sin sqrt strbyte strchar strfind strlen strlower strrep strsub strupper tan

# Input and Output Facilities & System Facilities
keywordclass4.lua4=openfile closefile readfrom writeto appendto \
remove rename flush seek tmpfile tmpname read write \
clock date difftime execute exit getenv setlocale time

#### Lua 5.0
# Basic Functions
keywordclass2.lua5=_G getfenv getmetatable ipairs loadlib next pairs pcall \
rawequal setfenv setmetatable xpcall \
string table math coroutine io os debug \
load module select
# I put the library names here, so when highlighted standalone, they are probably variable name from Lua 4.0 times.
# Last line -> Lua 5.1 functions

# String Manipulation, Table Manipulation, Mathematical Functions (string & table & math)
keywordclass3.lua5=string.byte string.char string.dump string.find string.len \
string.lower string.rep string.sub string.upper string.format string.gfind string.gsub \
table.concat table.foreach table.foreachi table.getn table.sort table.insert table.remove table.setn \
math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp \
math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod \
math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan \
string.gmatch string.match string.reverse table.maxn \
math.cosh math.fmod math.modf math.sinh math.tanh math.huge
# Last 2 lines -> Lua 5.1 functions

# Coroutine Manipulation, Input and Output Facilities, System Facilities (coroutine & io & os)
keywordclass4.lua5=coroutine.create coroutine.resume coroutine.status \
coroutine.wrap coroutine.yield \
io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write \
io.stdin io.stdout io.stderr \
os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename \
os.setlocale os.time os.tmpname \
coroutine.running package.cpath package.loaded package.loadlib package.path \
package.preload package.seeall io.popen
# Last 2 lines -> Lua 5.1 functions
# debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal
# debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv
# debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.traceback

# I keep keywords5, 6, 7 & 8 for other libraries
# To make the change from Lua 4 to Lua 5 as smooth as possible, I made these properties
# modular and flexible.
# If you use only Lua 4, you can remove the lua5 keywords.
# If you use only Lua 5, you can either remove the lua4 keywords, or put them
# in another property to highlight them in a warning/error style.
# If you still use both, you can keep them like below, or use separate styles.

keywords2.$(file.patterns.lua)=$(keywordclass2.lua) $(keywordclass2.lua4) $(keywordclass2.lua5)
keywords3.$(file.patterns.lua)=$(keywordclass3.lua4) $(keywordclass3.lua5)
keywords4.$(file.patterns.lua)=$(keywordclass4.lua4) $(keywordclass4.lua5)

#~ statement.indent.$(file.patterns.lua)=5 do else function then
#~ statement.lookback.$(file.patterns.lua)=20
indent.maintain.$(file.patterns.lua)=1

comment.block.lua=--~
comment.block.at.line.start.lua=1

# Lua styles

#Default
style.lua.32=$(font.code.base),fore:#000000
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=fore:#FF0000
# Block comment (Lua 5.0)
style.lua.1=$(colour.code.comment.box),$(font.code.comment.box),back:#D0F0F0,eolfilled
# Line comment
style.lua.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(colour.notused),$(font.notused)
# Number
style.lua.4=$(colour.number)
# Keyword
style.lua.5=$(colour.keyword)
# (Double quoted) String
style.lua.6=$(colour.string)
# Character (Single quoted string)
style.lua.7=$(colour.char)
# Literal string
style.lua.8=$(colour.string),$(font.code.comment.box),back:#E0FFFF
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(colour.preproc)
# Operators
style.lua.10=$(colour.operator)
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=back:#E0C0E0,eolfilled
# Other keywords (bozo test colors, but toned down ;)
style.lua.13=$(style.lua.5),back:#F5FFF5
style.lua.14=$(style.lua.5),back:#F5F5FF
style.lua.15=$(style.lua.5),back:#FFF5F5
style.lua.16=$(style.lua.5),back:#FFF5FF
style.lua.17=$(style.lua.5),back:#FFFFF5
style.lua.18=$(style.lua.5),back:#FFA0A0
style.lua.19=$(style.lua.5),back:#FFF5F5
# Braces are only matched in operator style
braces.lua.style=10

# compatible with LuaBinaries for Lua 5.1; will work on both platforms.
command.compile.*.lua=luac5.1 -o "$(FileName).luc" "$(FileNameExt)"
# Lua 5.1
command.go.*.lua=lua5.1 "$(FileNameExt)"
# Lua 4.0
#command.go.*.lua=Lua-4.0.exe -c -f "$(FileNameExt)"

##########============================================================
##pov.properties
##########===========================================================
# Define SciTE settings for POV-Ray SDL files.

file.patterns.pov=*.pov;*.inc

filter.pov=POV-Ray SDL (pov)|$(file.patterns.pov)|

indent.size.*.pov=2
tab.size.*.pov=2
use.tabs.*.pov=0
indent.size.*.inc=2
tab.size.*.inc=2
use.tabs.*.inc=0

lexer.$(file.patterns.pov)=pov

word.chars.pov=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.pov)=$(word.chars.pov)

api.*.pov=POV-Ray_SDL.api
#autocomplete.pov.ignorecase=1
autocomplete.pov.start.characters=.
#autocomplete.pov.fillups=(
#calltip.pov_quote.ignorecase=1
calltip.pov.word.characters=.$(word.chars.pov)

comment.block.at.line.start.pov=1
comment.block.pov=//~
#~ comment.stream.start.pov=#ifdef BOOFOO
#~ comment.stream.end.pov=#endif
comment.stream.start.pov=/*
comment.stream.end.pov=*/
comment.box.start.pov=/*
comment.box.middle.pov= *
comment.box.end.pov= */

#~ statement.indent.$(file.patterns.pov)=5 case catch class default do else for if \
#~ private protected public struct try union while
#~ statement.lookback.$(file.patterns.pov)=20
#~ block.start.$(file.patterns.pov)=10 {
#~ block.end.$(file.patterns.pov)=10 }
#indent.maintain.$(file.patterns.pov)=1
#indent.size.$(file.patterns.pov)=4
#tab.size.$(file.patterns.pov)=4
#use.tabs.$(file.patterns.pov)=1

# Actually, these are SDL directives, but SciTE is seeking for the preprocessor.* properties
preprocessor.symbol.$(file.patterns.pov)=#
preprocessor.start.$(file.patterns.pov)=if ifdef ifndef switch while macro
preprocessor.middle.$(file.patterns.pov)=else
preprocessor.end.$(file.patterns.pov)=end

# keywords(1) is for Language directives (#xxx)
keywordclass.pov=declare local include undef fopen fclose read write default version \
case range break debug error warning \
if ifdef ifndef switch while macro else end

keywords.$(file.patterns.pov)=$(keywordclass.pov)

# keywords2 is for Objects & CSG & Appearance (xxx {})
keywords2.$(file.patterns.pov)=camera light_source light_group \
object blob sphere cylinder box cone height_field julia_fractal \
lathe prism sphere_sweep superellipsoid sor text torus \
bicubic_patch disc mesh mesh2 polygon triangle smooth_triangle \
plane poly cubic quartic quadric isosurface parametric \
union intersection difference merge function array spline \
vertex_vectors normal_vectors uv_vectors face_indices normal_indices uv_indices \
texture texture_list interior_texture \
texture_map material_map image_map color_map colour_map pigment_map \
normal_map slope_map bump_map density_map \
pigment normal material interior finish reflection irid slope pigment_pattern image_pattern \
warp media scattering density background fog sky_sphere rainbow \
global_settings radiosity photons pattern \
transform looks_like projected_through contained_by clipped_by bounded_by

# keywords3 is for Types & Modifiers & Items
keywords3.$(file.patterns.pov)=linear_spline quadratic_spline cubic_spline natural_spline bezier_spline b_spline \
read write append inverse open \
perspective orthographic fisheye ultra_wide_angle omnimax panoramic \
spherical spotlight jitter circular orient \
media_attenuation media_interaction shadowless parallel \
refraction collect pass_through global_lights hierarchy sturm smooth \
gif tga iff pot png pgm ppm jpeg tiff sys ttf \
quaternion hypercomplex linear_sweep conic_sweep \
type all_intersections split_union cutaway_textures \
no_shadow no_image no_reflection double_illuminate hollow \
uv_mapping all use_index use_color use_colour no_bump_scale \
conserve_energy fresnel \
average agate boxed bozo bumps cells crackle cylindrical density_file dents \
facets granite leopard marble onion planar quilted radial ripples spotted waves wood wrinkles \
solid use_alpha interpolate magnet noise_generator toroidal \
ramp_wave triangle_wave sine_wave scallop_wave cubic_wave poly_wave \
once map_type method fog_type hf_gray_16 charset ascii utf8 \
rotate scale translate matrix location right up direction sky \
angle look_at aperture blur_samples focal_point confidence variance \
radius falloff tightness point_at area_light adaptive fade_distance fade_power \
threshold strength water_level tolerance max_iteration precision slice \
u_steps v_steps flatness inside_vector \
accuracy max_gradient evaluate max_trace precompute \
target ior dispersion dispersion_samples caustics \
color colour rgb rgbf rgbt rgbft red green blue filter transmit gray hf \
fade_color fade_colour quick_color quick_colour \
brick checker hexagon brick_size mortar bump_size \
ambient diffuse brilliance crand phong phong_size metallic specular \
roughness reflection_exponent exponent thickness \
gradient spiral1 spiral2 agate_turb form metric \
offset df3 coords size mandel exterior julia \
control0 control1 altitude turbulence octaves omega lambda \
repeat flip black-hole orientation dist_exp major_radius \
frequency phase intervals samples ratio absorption emission aa_threshold aa_level \
eccentricity extinction distance turb_depth fog_offset fog_alt width arc_angle falloff_angle \
adc_bailout ambient_light assumed_gamma irid_wavelength number_of_waves \
always_sample brigthness count error_bound gray_threshold load_file \
low_error_factor max_sample minimum_reuse nearest_count \
pretrace_end pretrace_start recursion_limit save_file \
spacing gather max_trace_level autostop expand_thresholds

# keywords4 is for Predefined Identifiers
keywords4.$(file.patterns.pov)=x y z t u v \
yes no true false on off \
clock clock_delta clock_on final_clock final_frame frame_number \
image_height image_width initial_clock initial_frame pi version

# keywords5 is for Predefined Functions
keywords5.$(file.patterns.pov)=abs acos acosh asc asin asinh atan atanh atan2 \
ceil cos cosh defined degrees dimensions dimension_size div exp file_exists floor \
inside int ln log max min mod pow prod radians rand seed select sin sinh sqrt strcmp \
strlen sum tan tanh val vdot vlength min_extent max_extent trace vaxis_rotate \
vcross vrotate vnormalize vturbulence chr concat str strlwr strupr substr vstr \
sqr cube reciprocal pwr

# keywords6 is for User defined keywords 1
keywords6.$(file.patterns.pov)=

# keywords7 is for User defined keywords 2
keywords7.$(file.patterns.pov)=

# keywords8 is for User defined keywords 3
keywords8.$(file.patterns.pov)=

# POV-Ray SDL styles

# Default
style.pov.32=$(font.code.base)
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.pov.0=fore:#FF0080
# Comment: /* */. Use fixed font to keep boxed comments as boxes
style.pov.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //. Proportionnal font is generally OK here
style.pov.2=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.pov.3=$(colour.number)
# Operators
style.pov.4=$(colour.operator)
# Identifiers (everything else...)
style.pov.5=
# Double quoted string
style.pov.6=$(colour.string)
# End of line where string is not closed
style.pov.7=back:#E0C0E0,eolfilled,$(font.computer),bold
# Directive: #keyword
style.pov.8=$(colour.preproc)
# Directive keyword error
style.pov.9=fore:#804020,$(font.code.comment.doc),italics
# Keywords (bozo test colors :-)
# Keyword 2: Objects & CSG & Appearance (xxx {})
style.pov.10=$(colour.keyword),back:#FFD0D0
# Keyword 3: Types & Modifiers & Items
style.pov.11=$(colour.keyword),back:#FFFFD0
# Keyword 4: Predefined Identifiers
style.pov.12=$(colour.keyword),bold
# Keyword 5: Predefined Functions
style.pov.13=$(colour.keyword),back:#D0D0FF
# Keyword 6
style.pov.14=$(colour.keyword),back:#D0FFD0
# Keyword 7
style.pov.15=$(colour.keyword),back:#D0D0D0
# Keyword 8
style.pov.17=$(colour.keyword),back:#E0E0E0
# Braces are only matched in operator style
braces.pov.style=4

command.compile.*.pov=pvengine.exe $(FileName)
command.build.*.pov=
command.go.*.pov=pvengine.exe $(FileName)

if PLAT_WIN
	command.help.$(file.patterns.pov)=$(CurrentWord)!D:\Programmes\UImages\POV-Ray 3.5\help\povray35.chm
	command.help.subsystem.$(file.patterns.pov)=4


##########============================================================
##vb.properties
##########===========================================================
# Define SciTE settings for VB files.

# BAS: Module, FRM: Form, CLS: Class Module, CTL: User Control
# PAG: Property Page, DSR: Data Report, DOB: User Document
file.patterns.vb=*.vb;*.bas;*.frm;*.cls;*.ctl;*.pag;*.dsr;*.dob
# VBS: VBScript, DSM: Visual[ex. Dev] Studio macro
file.patterns.wscript=*.vbs;*.dsm

# VBP: VB Project, VBG: VB Project Group (ActiveX), MAK: old (VB3) project file, VBW: VB Workspace
filter.vb=VB (vb vbp vbs bas frm cls ctl pag dsr dob)|$(file.patterns.vb);$(file.patterns.wscript);*.vbp;*.vbg;*.mak;*.vbw|

lexer.$(file.patterns.vb)=vb
lexer.$(file.patterns.wscript)=vbscript

# Keywords, operators, statements, data types and some words in .frm files
keywordclass.vb6=\
addressof alias and as attribute base begin binary boolean byref byte byval call case cdbl \
cint clng compare const csng cstr currency date decimal declare defbool defbyte defcur \
defdate defdbl defdec defint deflng defobj defsng defstr defvar dim do double each else \
elseif empty end enum eqv erase error event exit explicit false for friend function get \
global gosub goto if imp implements in input integer is len let lib like load lock long \
loop lset me mid midb mod new next not nothing null object on option optional or paramarray \
preserve print private property public raiseevent randomize redim rem resume return rset \
seek select set single static step stop string sub text then time to true type typeof \
unload until variant wend while with withevents xor

# html.properties picks up VB keywords from keywordclass.vb
keywordclass.vb=$(keywordclass.vb6)

# Mostly system statements (files, registry, I/O...) that
# I am not sure to include with the regular statements.
keywordclass.vbotherstatements=\
appactivate beep chdir chdrive close filecopy get input kill line unlock mkdir name \
open print put reset rmdir savepicture savesetting seek sendkeys setattr width write

# VBNet specific keywords
keywordclass.vbnet=\
addhandler andalso ansi assembly auto catch cbool cbyte cchar cdate cdec char class \
cobj continue csbyte cshort ctype cuint culng cushort custom default delegate directcast \
endif externalsource finally gettype handles imports inherits interface isfalse isnot \
istrue module mustinherit mustoverride my mybase myclass namespace narrowing notinheritable \
notoverridable of off operator orelse overloads overridable overrides partial protected \
readonly region removehandler sbyte shadows shared short strict structure synclock \
throw try trycast uinteger ulong unicode ushort using when widening writeonly

keywords.$(file.patterns.vb)=$(keywordclass.vb6) $(keywordclass.vbnet)
keywords.$(file.patterns.wscript)=$(keywordclass.vb6)

keywords2.$(file.patterns.vb)=$(keywordclass.vbotherstatements)

comment.block.vb='~
comment.block.vbscript='~
# VB styles

# Default
style.vb.32=$(font.base)
# White space
style.vb.0=
# Comment
style.vb.1=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.vb.2=$(colour.number)
# Keyword
style.vb.3=$(colour.keyword)
# String
style.vb.4=$(colour.string)
# Preprocessor (directives)
style.vb.5=$(colour.preproc)
# Operator
style.vb.6=$(colour.operator)
# Identifier
style.vb.7=
# Date
style.vb.8=$(colour.number)
# End of line where string is not closed
style.vb.9=$(style.stringeol)
# Other keywords (bozo test colors :-)
style.vb.10=$(style.vb.5),back:#D0FFD0
style.vb.11=$(style.vb.5),back:#D0D0FF
style.vb.12=$(style.vb.5),back:#FFD0D0

# VBScript styles same as VB styles
style.vbscript.0=$(style.vb.0)
style.vbscript.1=$(style.vb.1)
style.vbscript.2=$(style.vb.2)
style.vbscript.3=$(style.vb.3)
style.vbscript.4=$(style.vb.4)
style.vbscript.5=$(style.vb.5)
style.vbscript.6=$(style.vb.6)
style.vbscript.7=$(style.vb.7)
style.vbscript.8=$(style.vb.8)
style.vbscript.9=$(style.vb.9)
style.vbscript.10=$(style.vb.10)
style.vbscript.11=$(style.vb.11)
style.vbscript.12=$(style.vb.12)

# wscript
# normal execute
command.go.$(file.patterns.wscript)="$(FilePath)"
command.go.subsystem.$(file.patterns.wscript)=2

# note we have no real "build"; rather "execute and capture
# compiletime and runtime errors"
command.build.$(file.patterns.wscript)=cscript "$(FilePath)"
command.build.subsystem.$(file.patterns.wscript)=1

command.help.$(file.patterns.wscript)=$(CurrentWord)!C:\Program Files\Microsoft Visual Studio\MSDN\2001OCT\1033\MSDN130.COL
command.help.subsystem.$(file.patterns.wscript)=4
command.help.$(file.patterns.vb)=$(CurrentWord)!C:\Program Files\Microsoft Visual Studio\MSDN\2001OCT\1033\MSDN130.COL
command.help.subsystem.$(file.patterns.vb)=4


##########============================================================
##d.properties
##########===========================================================
# Define SciTE settings for D

file.patterns.d=*.d
filter.d=D (d)|$(file.patterns.d)|
lexer.$(file.patterns.d)=d

word.chars.d=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.d)=$(word.chars.d)
#~ word.characters.$(file.patterns.cs)=$(word.chars.d)
calltip.d.word.characters=$(chars.alpha)$(chars.numeric)_


#comment.block.at.line.start.d=1
comment.block.d=//~
comment.stream.start.d=/+
comment.stream.end.d=+/
comment.box.start.d=/*
comment.box.middle.d= *
comment.box.end.d= */
#lexer.d.fold.at.else=1

statement.indent.$(file.patterns.d)=6 case catch class debug default do else \
finally for foreach foreach_reverse if private protected public scope struct \
try union while with
statement.end.$(file.patterns.d)=13 ;
statement.lookback.$(file.patterns.d)=20
block.start.$(file.patterns.d)=13 {
block.end.$(file.patterns.d)=13 }

# D keywords
keywords.$(file.patterns.d)=abstract alias align asm assert auto \
 body bool break byte \
 case cast catch cdouble cent cfloat char class const continue creal \
 dchar debug default delegate delete deprecated do double \
 else enum export extern \
 false final finally float for foreach foreach_reverse function \
 goto \
 idouble if ifloat import in inout int interface invariant ireal is \
 lazy long \
 mixin module \
 new null \
 out override \
 package pragma private protected public \
 real return \
 scope short static struct super switch synchronized \
 template this throw true try typedef typeid typeof \
 ubyte ucent uint ulong union unittest ushort \
 version void volatile \
 wchar while with

# keywords2 are intended for embedded ASM

# keywords3 are intended for doxygen
keywords3.$(file.patterns.d)=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception \
f$ f[ f] file fn hideinitializer htmlinclude htmlonly \
if image include ingroup internal invariant interface latexonly li line link \
mainpage name namespace nosubgrouping note overload \
p page par param post pre ref relates remarks return retval \
sa section see showinitializer since skip skipline struct subsection \
test throw todo typedef union until \
var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }

# keywords4 are intended for syntax driven or custom highlighting


# Styles

# 0 - whitespace
# 1, 2, 3, 4 - comments:  /* */,  //,  /** */ or /*! */,  /+ +/
# 5 - number
# 6, 7, 8, 9 - keywords: standard, secondary, doc keywords, typedefs and aliases
# 10 - string
# 11 - string not closed
# 12 - char
# 13 - operator
# 14 - identifier
# 15, 16, 17 - Doc comments: line doc /// or //!, doc keyword, doc keyword err

style.d.32=$(font.base)
style.d.0=fore:#808080
style.d.1=$(colour.code.comment.box),$(font.code.comment.box)
style.d.2=$(colour.code.comment.line),$(font.code.comment.line)
style.d.3=$(colour.code.comment.doc),$(font.code.comment.doc)
style.d.4=$(colour.code.comment.nested),$(font.code.comment.nested)
style.d.5=$(colour.number)
style.d.6=$(colour.keyword),bold
style.d.7=$(colour.keyword),bold
style.d.8=$(colour.keyword),bold
style.d.9=$(colour.keyword),bold
style.d.10=$(colour.string)
style.d.11=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.d.12=$(colour.char)
style.d.13=$(colour.operator),bold
style.d.14=
style.d.15=$(colour.code.comment.doc),$(font.code.comment.doc)
style.d.16=fore:#3060A0,$(font.code.comment.doc)
style.d.17=fore:#804020,$(font.code.comment.doc)
# breaces must be operator style to allow matching
braces.d.style=13


command.compile.*.d=dmd -O $(FileNameExt)
command.build.*.d=$(make.command)
command.go.*.d=$(FileName)


##########============================================================
##erlang.properties
##########===========================================================

# Define SciTE settings for Erlang files.

# M: Erlang M-Files
file.patterns.erlang=*.erl;*.hrl

# M: Erlang M-Files
filter.erlang=Erlang (erl hrl)|$(file.patterns.erlang)|

lexer.$(file.patterns.erlang)=erlang

# Reserved Erlang words
keywords.$(file.patterns.erlang)=after and andalso band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse query receive rem try when xor
# Erlang built-in functions (BIFs)
keywords2.$(file.patterns.erlang)=erlang: abs adler32 adler32_combine erlang:append_element apply atom_to_binary atom_to_list binary_to_atom binary_to_existing_atom binary_to_list bitstring_to_list binary_to_term bit_size erlang:bump_reductions byte_size erlang:cancel_timer check_process_code concat_binary crc32 crc32_combine date decode_packet delete_module erlang:demonitor disconnect_node erlang:display element erase erlang:error exit float float_to_list erlang:fun_info erlang:fun_to_list erlang:function_exported garbage_collect get erlang:get_cookie get_keys erlang:get_stacktrace group_leader halt erlang:hash hd erlang:hibernate integer_to_list erlang:integer_to_list iolist_to_binary iolist_size is_alive is_atom is_binary is_bitstring is_boolean erlang:is_builtin is_float is_function is_integer is_list is_number is_pid is_port is_process_alive is_record is_reference is_tuple length link list_to_atom list_to_binary list_to_bitstring list_to_existing_atom list_to_float list_to_integer erlang:list_to_integer list_to_pid list_to_tuple load_module erlang:load_nif erlang:loaded erlang:localtime erlang:localtime_to_universaltime make_ref erlang:make_tuple erlang:max erlang:md5 erlang:md5_final erlang:md5_init erlang:md5_update erlang:memory erlang:min module_loaded erlang:monitor monitor_node node nodes now open_port erlang:phash erlang:phash2 pid_to_list port_close port_command erlang:port_command port_connect port_control erlang:port_call erlang:port_info erlang:port_to_list erlang:ports pre_loaded erlang:process_display process_flag process_info processes purge_module put erlang:raise erlang:read_timer erlang:ref_to_list register registered erlang:resume_process round self erlang:send erlang:send_after erlang:send_nosuspend erlang:set_cookie setelement size spawn spawn_link spawn_monitor spawn_opt split_binary erlang:start_timer statistics erlang:suspend_process erlang:system_flag erlang:system_info erlang:system_monitor erlang:system_profile term_to_binary throw time tl erlang:trace erlang:trace_delivered erlang:trace_info erlang:trace_pattern trunc tuple_size tuple_to_list erlang:universaltime erlang:universaltime_to_localtime unlink unregister whereis erlang:yield
# Erlang preprocessor instructions
keywords3.$(file.patterns.erlang)=-define -else -endif -ifdef -ifndef -include -include_lib -undef
# Erlang module attributes
keywords4.$(file.patterns.erlang)=-behavior -behaviour -compile -created -created_by -export -file -import -module -modified -modified_by -record -revision -spec -type -vsn
# Erlang documentation helpers
keywords5.$(file.patterns.erlang)=@author @clear @copyright @deprecated @doc @docfile @end @equiv @headerfile @hidden @private @reference @see @since @spec @throws @title @todo @TODO @type @version
# Erlang documentation macros
keywords6.$(file.patterns.erlang)=@date @docRoot @link @module @package @section @time @type @version

# Comment start
comment.block.erlang=%~

# Erlang styles
# foreground;background;bold;italic

# Default style
style.erlang.0=fore:#000000

# Comments
#---------------------------
# Default comment
style.erlang.1=fore:#d00000
# Function comment
style.erlang.14=fore:#3f5fbf
# Module comment
style.erlang.15=fore:#3f5fbf
# Documentation helper in comment
style.erlang.16=fore:#3f5fbf,bold
# Documentation macro in comment
style.erlang.17=fore:#3f5fbf,bold,italics

# Types
#---------------------------
# Variable
style.erlang.2=fore:#7f0000
# Number
style.erlang.3=fore:#007f00
# String
style.erlang.5=fore:#ff901e
# Character
style.erlang.9=fore:#007f00
# Macro
style.erlang.10=fore:#7f007f
# Macro quoted
style.erlang.19=fore:#7f007f
# Record
style.erlang.11=fore:#7f7f00,bold
# Record quoted
style.erlang.20=fore:#7f7f00,bold
# Atom
style.erlang.7=fore:#7f7f00
# Atom quoted
style.erlang.18=fore:#7f7f00
# Node name
style.erlang.13=fore:#007f7f
# Node name quoted
style.erlang.21=fore:#007f7f

# Special
#---------------------------
# Reserved words
style.erlang.4=fore:#00007f,bold
# Built-in functions
style.erlang.22=fore:#0000ff,bold
# Function name
style.erlang.8=fore:#00007f
# Module name
style.erlang.23=fore:#00cccc
# Module attributes
style.erlang.24=fore:#007f7f
# Preprocessor
style.erlang.12=fore:#007f7f
# Operators
style.erlang.6=fore:#000000
