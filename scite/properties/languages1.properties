
##########============================================================
##others.properties
##########============================================================

# Define SciTE settings for other simple files.

file.patterns.props=*.properties;*.session;*.ini;*.inf;*.reg;*.url;*.cfg;*.cnf;*.aut
file.patterns.text=*.txt;*.log;*.lst;*.doc;*.diz;*.nfo
file.patterns.batch=*.bat;*.cmd;*.nt
file.patterns.diff=*.diff;*.patch
file.patterns.make=makefile;Makefile;*.mak;configure

filter.properties=Properties (ini inf reg url cfg cnf)|$(file.patterns.props)|
filter.text=Text (txt log lst doc diz nfo)|$(file.patterns.text);make*|
filter.batch=Batch (bat cmd nt)|$(file.patterns.batch)|
filter.diff=Difference (diff patch)|$(file.patterns.diff)|

lexer.$(file.patterns.props)=props
lexer.$(file.patterns.batch)=batch
lexer.*.err=errorlist
lexer.$(file.patterns.make)=makefile
lexer.*.iface=makefile
lexer.$(file.patterns.diff)=diff

word.characters.$(file.patterns.text)=$(chars.alpha)$(chars.numeric)$(chars.accented)-'

colour.other.operator=fore:#B06000

# Properties styles

# Default
style.props.0=

# Comment
style.props.1=fore:#007F7F,$(font.comment)
# Section
style.props.2=$(colour.string),back:#E0F0F0,eolfilled
# Assignment operator
style.props.3=$(colour.other.operator)
# Default value (@)
style.props.4=$(colour.preproc)
# Key
style.props.5=
# Matched Operators
style.props.34=fore:#0000FF,notbold
style.props.35=fore:#FF0000,notbold
comment.block.props=#~
preprocessor.symbol.$(file.patterns.make)=!
preprocessor.start.$(file.patterns.make)=IF IFDEF IFNDEF
preprocessor.middle.$(file.patterns.make)=ELSE ELSEIF ELSEIFDEF ELSEIFNDEF
preprocessor.end.$(file.patterns.make)=ENDIF


# Batch styles

# List from http://www.easydos.com/dosindex.html
# I limit here the commands to those built in command.com, ie. I don't list external Dos commands
# if [no] (test) (command) -- test is EXIST (filename) | (string1)==(string2) | ERRORLEVEL (number)
# for %%(variable) IN (set) DO (command) -- variable is [a-zA-Z] -- eg for %%X in (*.txt) do type %%X
keywordclass.batch=rem set if exist errorlevel for in do \
break call chcp cd chdir choice cls country ctty date del erase dir echo \
exit goto loadfix loadhigh mkdir md move path pause prompt rename ren \
rmdir rd shift time type ver verify vol \
com con lpt nul \
color copy defined else not start
keywords.$(file.patterns.batch)=$(keywordclass.batch)

# Optional list of external commands to highlight in style 5.
# If not set all commands are highlighted in style 5.
#keywords2.$(file.patterns.batch)=append attrib chkdsk comp diskcomp

# Default
style.batch.0=fore:#000000
# Comment (rem or ::)
style.batch.1=fore:#007F00,$(font.comment)
# Keywords
style.batch.2=$(colour.keyword),bold
# Label (line beginning with ':')
style.batch.3=$(colour.string),back:#606060,fore:#FFFF00,eolfilled
# Hide command character ('@')
style.batch.4=$(colour.preproc)
# External commands
style.batch.5=fore:#007090,$(font.monospace),bold
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=fore:#800080
# Operator: * ? < > |
style.batch.7=fore:#000000

comment.block.batch=REM ~

# Makefile styles

# Default
style.makefile.0=fore:#000000
# Comment: #
style.makefile.1=$(colour.other.comment),$(font.code.comment.box)
# Pre-processor or other comment: !
style.makefile.2=$(colour.preproc)
# Variable: $(x)
style.makefile.3=fore:#000080
# Operator
style.makefile.4=$(colour.other.operator)
# Target
style.makefile.5=fore:#A00000
# Error
style.makefile.9=$(colour.error),eolfilled
# Matched Operators
style.makefile.34=fore:#0000FF,notbold
style.makefile.35=fore:#FF0000,notbold

comment.block.makefile=#~

# Error list styles

style.errorlist.32=fore:#B06000,$(font.small)
# Default
style.errorlist.0=fore:#000000
# python Error
style.errorlist.1=fore:#FF0000
# gcc Error
style.errorlist.2=fore:#800080
# Microsoft Error
style.errorlist.3=fore:#808000
# command or return status
style.errorlist.4=fore:#0000FF
# Borland error and warning messages
style.errorlist.5=fore:#B06000
# perl error and warning messages
style.errorlist.6=fore:#FF0000
# .NET tracebacks
style.errorlist.7=fore:#FF0000
# Lua error and warning messages
style.errorlist.8=fore:#FF0000
# ctags
style.errorlist.9=fore:#FF00FF
# diff changed !
style.errorlist.10=fore:#007F00
# diff addition +
style.errorlist.11=fore:#00007F
# diff deletion -
style.errorlist.12=fore:#007F7F
# diff message ---
style.errorlist.13=fore:#7F0000
# PHP error
style.errorlist.14=fore:#FF0000
# Essential Lahey Fortran 90 error
style.errorlist.15=fore:#FF0000
# Intel Fortran Compiler error
style.errorlist.16=fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
style.errorlist.17=fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
style.errorlist.18=fore:#FF0000
# HTML Tidy
style.errorlist.19=fore:#FF0000
# Java runtime stack trace
style.errorlist.20=fore:#FF0000
# Text matched with find in files and message part of GCC errors
style.errorlist.21=fore:#000000
# Ensures that spacing is not affected by line number styles
style.errorlist.33=$(font.small)

lexer.errorlist.value.separate=1

# Difference styles

# Default
style.diff.0=fore:#000000
# Comment (part before "diff ..." or "--- ..." and , Only in ..., Binary file...)
style.diff.1=fore:#007F00
# Command (diff ...)
style.diff.2=fore:#7F7F00
# Source file (--- ...) and Destination file (+++ ...)
style.diff.3=fore:#7F0000
# Position setting (@@ ...)
style.diff.4=fore:#7F007F
# Line removal (-...)
style.diff.5=fore:#007F7F
# Line addition (+...)
style.diff.6=fore:#00007F
# Line change (!...)
style.diff.7=fore:#7F7F7F

command.build.makefile=make
command.build.*.mak=make

if PLAT_WIN
	command.go.*.bat=$(FileNameExt)
	command.name.0.*.bat=Execute Selection
	command.0.*.bat=$(CurrentSelection)
	command.name.1.*.mak=nmake
	command.1.*.mak=nmake -f $(FileNameExt)


##########============================================================
##ada.properties
##########============================================================
# Define SciTE settings for Ada files.

filter.ada=Ada (ads adb)|*.ads;*.adb|

file.patterns.ada=*.ads;*.adb

lexer.$(file.patterns.ada)=ada

#indent.size.$(file.patterns.ada)=3
#use.tabs.$(file.patterns.ada)=0

# Keyword except of operator keywords
keywordclass.ada.main=abort abstract accept access aliased all array at begin body \
case constant declare delay delta digits do else elsif end entry exception exit for \
function generic goto if in is limited loop new null of others out package pragma \
private procedure protected raise range record renames requeue return reverse \
select separate subtype tagged task terminate then type until use when while with
# Keywords for operators
keywordclass.ada.operators=abs and mod not or rem xor

keywordclass.ada=$(keywordclass.ada.main) $(keywordclass.ada.operators)

keywords.$(file.patterns.ada)=$(keywordclass.ada)

# Ada styles
# Default
style.ada.0=fore:#808080
# Keyword
style.ada.1=$(colour.keyword),bold
# Identifiers
style.ada.2=
# Number
style.ada.3=$(colour.number)
# Operators (delimiters)
style.ada.4=$(colour.operator),bold
# Character
style.ada.5=$(colour.char)
# End of line where character is not closed
style.ada.6=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# String
style.ada.7=$(colour.string)
# End of line where string is not closed
style.ada.8=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Label
style.ada.9=fore:#7F0000
# Comment
style.ada.10=$(colour.code.comment.line),$(font.code.comment.line)
# Illegal token
style.ada.11=fore:#FF0000

# Comments
comment.block.ada=--~

braces.ada.style=4

statement.indent.$(file.patterns.ada)=5 begin declare else elsif exception for if is loop while
statement.lookback.$(file.patterns.ada)=20
block.start.$(file.patterns.ada)=10 then is
block.end.$(file.patterns.ada)=10 end

calltip.ada.word.characters=._$(chars.alpha)

adagcc=gcc -c $(FileNameExt)

command.compile.*.ads=$(adagcc)
command.build.*.ads=gnatmake
command.go.*.ads=$(FileName)

command.compile.*.adb=$(adagcc)
command.build.*.adb=gnatmake
command.go.*.adb=$(FileName)


##########============================================================
##asm.properties
##########============================================================
# Define SciTE settings for Assembler files (IA32 MASM and NASM)
# Originally by Black Horus blackhorus@gmx.net 2002
# Updated by Kein-Hong Man mkh@pl.jaring.my 2003-10

# Masm files
file.patterns.asm=*.asm
filter.asm=Assembler (asm)|$(file.patterns.asm)|

lexer.$(file.patterns.asm)=asm

# these keywords are taken from the masm book (v6.13)
# updated with Intel Pentium 4, MMX, SSE, SSE2 instructions from NASM
# 	(note that some are undocumented instructions)

cpu_instruction=aaa aad aam aas adc add and call cbw \
	clc cld cli cmc cmp cmps cmpsb cmpsw cwd daa das dec div esc hlt \
	idiv imul in inc int into iret ja jae jb jbe jc jcxz je jg jge jl \
	jle jmp jna jnae jnb jnbe jnc jne jng jnge jnl jnle jno jnp jns \
	jnz jo jp jpe jpo js jz lahf lds lea les lods lodsb lodsw loop \
	loope loopew loopne loopnew loopnz loopnzw loopw loopz loopzw \
	mov movs movsb movsw mul neg nop not or out pop popf push pushf \
	rcl rcr ret retf retn rol ror sahf sal sar sbb scas scasb scasw \
	shl shr stc std sti stos stosb stosw sub test wait xchg xlat \
	xlatb xor \
	bound enter ins insb insw leave outs outsb outsw popa pusha pushw \
	arpl lar lsl sgdt sidt sldt smsw str verr verw clts lgdt lidt lldt lmsw ltr \
	bsf bsr bt btc btr bts cdq cmpsd cwde insd iretd iretdf  iretf \
	jecxz lfs lgs lodsd loopd  looped  loopned  loopnzd  loopzd  lss \
	movsd movsx movzx outsd popad popfd pushad pushd  pushfd scasd seta \
	setae setb setbe setc sete setg setge setl setle setna setnae setnb \
	setnbe setnc setne setng setnge setnl setnle setno setnp setns \
	setnz seto setp setpe setpo sets setz shld shrd stosd \
	bswap cmpxchg invd  invlpg  wbinvd  xadd \
	lock rep repe repne repnz repz

# these are mostly non-MMX/SSE/SSE2 486+ instructions

cpu_instruction2=cflush cpuid emms femms \
	cmovo cmovno cmovb cmovc cmovnae cmovae cmovnb cmovnc \
	cmove cmovz cmovne cmovnz cmovbe cmovna cmova cmovnbe \
	cmovs cmovns cmovp cmovpe cmovnp cmovpo cmovl cmovnge \
	cmovge cmovnl cmovle cmovng cmovg cmovnle \
	cmpxchg486 cmpxchg8b  \
	loadall loadall286 ibts icebp int1 int3 int01 int03 iretw \
	popaw popfw pushaw pushfw rdmsr rdpmc rdshr rdtsc \
	rsdc rsldt rsm rsts salc smi smint smintold svdc svldt svts \
	syscall sysenter sysexit sysret ud0 ud1 ud2 umov xbts wrmsr wrshr

# fpu instructions, updated for 486+

fpu_instruction=f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcom fcomp fcompp fdecstp \
	fdisi fdiv fdivp fdivr fdivrp feni ffree fiadd ficom ficomp fidiv \
	fidivr fild fimul fincstp finit fist fistp fisub fisubr fld fld1 \
	fldcw fldenv fldenvw fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul \
	fmulp fnclex fndisi fneni fninit fnop fnsave fnsavew fnstcw fnstenv \
	fnstenvw fnstsw fpatan fprem fptan frndint frstor frstorw fsave \
	fsavew fscale fsqrt fst fstcw fstenv fstenvw fstp fstsw fsub fsubp \
	fsubr fsubrp ftst fwait fxam fxch fxtract fyl2x fyl2xp1 \
	fsetpm fcos fldenvd fnsaved fnstenvd fprem1 frstord fsaved fsin fsincos \
	fstenvd fucom fucomp fucompp fcomi fcomip ffreep \
	fcmovb fcmove fcmovbe fcmovu fcmovnb fcmovne fcmovnbe fcmovnu

# these are MMX, SSE, SSE2 instructions

ext_instruction=addpd addps addsd addss andpd andps andnpd andnps \
	cmpeqpd cmpltpd cmplepd cmpunordpd cmpnepd cmpnltpd cmpnlepd cmpordpd \
	cmpeqps cmpltps cmpleps cmpunordps cmpneps cmpnltps cmpnleps cmpordps \
	cmpeqsd cmpltsd cmplesd cmpunordsd cmpnesd cmpnltsd cmpnlesd cmpordsd \
	cmpeqss cmpltss cmpless cmpunordss cmpness cmpnltss cmpnless cmpordss \
	comisd comiss cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps \
	cvtpi2pd cvtpi2ps cvtps2dq cvtps2pd cvtps2pi cvtss2sd cvtss2si \
	cvtsd2si cvtsd2ss cvtsi2sd cvtsi2ss \
	cvttpd2dq cvttpd2pi cvttps2dq cvttps2pi cvttsd2si cvttss2si \
	divpd divps divsd divss fxrstor fxsave ldmxscr lfence mfence \
	maskmovdqu maskmovdq maxpd maxps paxsd maxss minpd minps minsd minss \
	movapd movaps movdq2q movdqa movdqu movhlps movhpd movhps movd movq \
	movlhps movlpd movlps movmskpd movmskps movntdq movnti movntpd movntps \
	movntq movq2dq movsd movss movupd movups mulpd mulps mulsd mulss \
	orpd orps packssdw packsswb packuswb paddb paddsb paddw paddsw \
	paddd paddsiw paddq paddusb paddusw pand pandn pause paveb pavgb pavgw \
	pavgusb pdistib pextrw pcmpeqb pcmpeqw pcmpeqd pcmpgtb pcmpgtw pcmpgtd \
	pf2id pf2iw pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul \
	pmachriw pmaddwd pmagw pmaxsw pmaxub pminsw pminub pmovmskb \
	pmulhrwc pmulhriw pmulhrwa pmulhuw pmulhw pmullw pmuludq \
	pmvzb pmvnzb pmvlzb pmvgezb pfnacc pfpnacc por prefetch prefetchw \
	prefetchnta prefetcht0 prefetcht1 prefetcht2 pfrcp pfrcpit1 pfrcpit2 \
	pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pf2iw pinsrw psadbw pshufd \
	pshufhw pshuflw pshufw psllw pslld psllq pslldq psraw psrad \
	psrlw psrld psrlq psrldq psubb psubw psubd psubq psubsb psubsw \
	psubusb psubusw psubsiw pswapd punpckhbw punpckhwd punpckhdq punpckhqdq \
	punpcklbw punpcklwd punpckldq punpcklqdq pxor rcpps rcpss \
	rsqrtps rsqrtss sfence shufpd shufps sqrtpd sqrtps sqrtsd sqrtss \
	stmxcsr subpd subps subsd subss ucomisd ucomiss \
	unpckhpd unpckhps unpcklpd unpcklps xorpd xorps

register=ah al ax bh bl bp bx ch cl cr0 cr2 cr3 cr4 cs \
	cx dh di dl dr0 dr1 dr2 dr3 dr6 dr7 ds dx eax ebp ebx ecx edi edx \
	es esi esp fs gs si sp ss st tr3 tr4 tr5 tr6 tr7 \
	st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 \
	xmm0 xmm1 xmm2 xmm3 xmm4 xmm5 xmm6 xmm7

register_64=rax rcx rdx rbx rsp rbp rsi rdi \
	r8 r8d r8w r8b r9 r9d r9w r9b \
	r10 r10d r10w r10b r11 r11d r11w r11b \
	r12 r12d r12w r12b r13 r13d r13w r13b \
	r14 r14d r14w r14b r15 r15d r15w r15b \
	rip rflags gdtr idtr ldtr tr \
	cr8 xcr0 \
	xmm8 xmm9 xmm10 xmm12 xmm12 xmm13 xmm14 xmm15
	
# masm directives

directive=.186 .286 .286c .286p .287 .386 .386c .386p .387 .486 .486p \
	.8086 .8087 .alpha .break .code .const .continue .cref .data .data?  \
	.dosseg .else .elseif .endif .endw .err .err1 .err2 .errb \
	.errdef .errdif .errdifi .erre .erridn .erridni .errnb .errndef \
	.errnz .exit .fardata .fardata? .if .lall .lfcond .list .listall \
	.listif .listmacro .listmacroall  .model .no87 .nocref .nolist \
	.nolistif .nolistmacro .radix .repeat .sall .seq .sfcond .stack \
	.startup .tfcond .type .until .untilcxz .while .xall .xcref \
	.xlist alias align assume catstr comm comment db dd df dosseg dq \
	dt dup dw echo else elseif elseif1 elseif2 elseifb elseifdef elseifdif \
	elseifdifi elseife elseifidn elseifidni elseifnb elseifndef end \
	endif endm endp ends eq equ even exitm extern externdef extrn for \
	forc ge goto group gt high highword if if1 if2 ifb ifdef ifdif \
	ifdifi ife  ifidn ifidni ifnb ifndef include includelib instr invoke \
	irp irpc label le length lengthof local low lowword lroffset \
	lt macro mask mod .msfloat name ne offset opattr option org %out \
	page popcontext proc proto ptr public purge pushcontext record \
	repeat rept seg segment short size sizeof sizestr struc struct \
	substr subtitle subttl textequ this title type typedef union while width

directive_operand=$ ? @b @f addr basic byte c carry? dword \
	far far16 fortran fword near near16 overflow? parity? pascal qword  \
	real4  real8 real10 sbyte sdword sign? stdcall sword syscall tbyte \
	vararg word zero? flat near32 far32 \
	abs all assumes at casemap common compact \
	cpu dotname emulator epilogue error export expr16 expr32 farstack flat \
	forceframe huge language large listing ljmp loadds m510 medium memory \
	nearstack nodotname noemulator nokeyword noljmp nom510 none nonunique \
	nooldmacros nooldstructs noreadonly noscoped nosignextend nothing \
	notpublic oldmacros oldstructs os_dos para private prologue radix \
	readonly req scoped setif2 smallstack tiny use16 use32 uses \

# nasm directives, mostly complete, does not parse properly
# the following: %!<env>, %%, %+, %+n %-n, %{n}

directive_nasm=db dw dd dq dt resb resw resd resq rest incbin equ times \
	%define %idefine %xdefine %xidefine %undef %assign %iassign \
	%strlen %substr %macro %imacro %endmacro %rotate .nolist \
	%if %elif %else %endif %ifdef %ifndef %elifdef %elifndef \
	%ifmacro %ifnmacro %elifmacro %elifnmacro %ifctk %ifnctk %elifctk %elifnctk \
	%ifidn %ifnidn %elifidn %elifnidn %ifidni %ifnidni %elifidni %elifnidni \
	%ifid %ifnid %elifid %elifnid %ifstr %ifnstr %elifstr %elifnstr \
	%ifnum %ifnnum %elifnum %elifnnum %error %rep %endrep %exitrep \
	%include %push %pop %repl struct endstruc istruc at iend align alignb \
	%arg %stacksize %local %line \
	bits use16 use32 section absolute extern global common cpu org \
	section group import export

directive_operand_nasm=a16 a32 o16 o32 byte word dword nosplit $ $$ seq wrt \
	flat large small .text .data .bss near far \
	%0 %1 %2 %3 %4 %5 %6 %7 %8 %9


keywords.$(file.patterns.asm)=$(cpu_instruction) $(cpu_instruction2)
keywords2.$(file.patterns.asm)=$(fpu_instruction)
keywords3.$(file.patterns.asm)=$(register) $(register_64)
keywords4.$(file.patterns.asm)=$(directive) $(directive_nasm)
keywords5.$(file.patterns.asm)=$(directive_operand) $(directive_operand_nasm)
keywords6.$(file.patterns.asm)=$(ext_instruction)

comment.block.asm=;


# Assembler Styles
#style.asm.32=fore:#808080,font:Verdana,size:8
# Default
style.asm.0=
# Comment
style.asm.1=fore:#adadad
#$(colour.code.comment.line),font:Comic Sans MS,size:8
# Number
style.asm.2=fore:#ff0000
# String
style.asm.3=$(colour.string)
# Operator
style.asm.4=$(colour.operator),bold
# Identifier
style.asm.5=
# CPU instruction
style.asm.6=$(colour.keyword),bold
#fore:#0000ff
# FPU instruction
style.asm.7=fore:#0000ff
# Register
style.asm.8=fore:#46aa03,bold
# assembler Directive
style.asm.9=fore:#0000ff
# assembler Directive Operand
style.asm.10=fore:#0000ff
# Comment block (GNU as /*...*/ syntax, unimplemented)
style.asm.11=$(colour.code.comment.box),$(font.code.comment.box)
# Character/String (single quote) (also character prefix in GNU as)
style.asm.12=$(colour.char)
# End of line where string is not closed
style.asm.13=fore:#000000,back:#E0C0E0,eolfilled
# Extended instructions
style.asm.14=fore:#B00040


command.compile.$(file.patterns.asm)=masm $(FileNameExt)

command.name.0.*.asm=Link
command.0.*.asm=link $(FileName)


statement.indent.$(file.patterns.asm)=9 .if


##########============================================================
##ave.properties
##########============================================================
# Define SciTE settings for Avennue files.

filter.ave=AVE (ave)|*.ave|


file.patterns.ave=*.ave

lexer.*.ave=ave
lexer.$(file.patterns.ave)=ave

####################################################
# import classes and requests
# files ave.classes &  ave.funcs is to large
#import ave.classes
#import ave.funcs

keywords.$(file.patterns.ave)=nil true false else for if while then elseif end av self in exit
#keywords2.$(file.patterns.ave)=$(keywordclass.ave)
#keywords3.$(file.patterns.ave)=$(keywordfunc.ave)
word.chars.ave=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ave)=$(word.chars.ave)

statement.indent.$(file.patterns.ave)=1 else for if while then
statement.lookback.$(file.patterns.ave)=1 end

#Avenue string not support tab symbol, if You use tabs in script all tabs automatic translated to space.
#use.tabs=0

####################################################
#Load user-defined api for current project.
#api.$(file.patterns.ave)=ave.api
####################################################

comment.block.ave='--

comment.box.start.ave='--
comment.box.middle.ave='--
comment.box.end.ave='--
#Avenue is not case-sensitive lang.
autocomplete.ave.ignorecase=1
calltip.ave.ignorecase=1
autocomplete.ave.start.characters=.
calltip.ave.word.characters=.$(word.chars.ave)

# AVE styles
############################################################
# Default
style.ave.32=$(font.code.base),fore:#000000
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.ave.0=fore:#FF0000
# Comment
style.ave.1=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.ave.2=$(colour.number),bold
# Keyword
style.ave.3=$(colour.keyword),bold
# String
style.ave.6=$(colour.string)
# Enumeration
style.ave.7=$(colour.preproc),bold
# End of line where string is not closed
style.ave.8=back:#E0C0E0,eolfilled
# Operators
style.ave.10=$(colour.operator)
# Identifier (everything else...)
style.ave.9=$(font.code.base),fore:#000000
# Other keywords (bozo test colors :-)
style.ave.12=$(font.code.base),fore:#003355,bold
style.ave.13=$(font.code.base),fore:#005533,bold
style.ave.14=$(colour.keyword)
style.ave.15=$(colour.keyword)
style.ave.16=$(colour.keyword)
# Braces are only matched in operator style
braces.ave.style=10
############################################################


avenue=ave "$(FilePath)"
avenueGo=avego "$(FilePath)"
avenueBuild=avebuild "$(FilePath)"

################################################################
#use winhlp32 system
#if ArcView installed in other directory please correct path <C:\ESRI\AV_GIS30\ARCVIEW\HELP\ARCVIEW>
#command.help.$(file.patterns.ave)=$(CurrentWord)!C:\ESRI\AV_GIS30\ARCVIEW\HELP\ARCVIEW
#command.help.subsystem.$(file.patterns.ave)=5


#~ # compile
#~ command.compile.$(file.patterns.ave)=$(avenue)
#~ command.go.$(file.patterns.ave)=$(avenueGo)
#~ #send to arcview
#~ command.name.0.*.ave=Insert into project
#~ command.0.*.ave=$(avenueBuild)
#~ command.subsystem.0.*.ave=1

#~ command.name.1.*.ave=Variables Report
#~ command.1.*.ave=VarsReport.exe  "$(FilePath)"


##########============================================================
##baan.properties
##########============================================================
# Define SciTE settings for Baan files.

file.patterns.baan=*.bc;*.cln

filter.baan=Baan (baan)|$(file.patterns.baan)|

lexer.$(file.patterns.baan)=baan

word.characters.$(file.patterns.baan)=$(chars.alpha)$(chars.numeric)_#.$
calltip.baan.word.characters="._0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$"
autocomplete.baan.ignorecase=1
calltip.baan.ignorecase=1

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.baan)=#
preprocessor.start.$(file.patterns.baan)=if ifdef ifndef
preprocessor.middle.$(file.patterns.baan)=else elif
preprocessor.end.$(file.patterns.baan)=endif

keywordclass.baan=
keywords.$(file.patterns.baan)=$(keywordclass.baan)

# Comment blocks for Baan
comment.block.baan=|
comment.box.start.baan=|
comment.box.middle.baan=|
comment.box.end.baan=|
# Doesnot work too good for Baan use block or box commands
comment.stream.start.baan=DllUsage
comment.stream.end.baan=EndDllUsage


# Baan styles

colour.baan.operator=fore:#B06000

# Default
style.baan.32=$(font.monospace)
# White space
style.baan.0=fore:#808080,$(font.monospace)
# Comment
style.baan.1=$(colour.code.comment.line),$(font.monospace)
# Doc comment
style.baan.2=fore:#007F7F,$(font.comment)
# Number
style.baan.3=$(colour.number),$(font.monospace)
# Keyword
style.baan.4=$(colour.keyword),bold,$(font.monospace)
# Double quoted string
style.baan.5=$(colour.string),$(font.monospace)
# Preprocessor
style.baan.6=$(colour.preproc),$(font.monospace)
# Operators
style.baan.7=$(colour.operator),bold,$(font.monospace)
# Identifiers
style.baan.8=$(font.monospace)
# End of line where string is not closed
style.baan.9=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Keywords2
style.baan.10=fore:#B00040,$(font.monospace)
# Braces are only matched in operator style
braces.baan.style=10

#Indent properties
statement.indent.$(file.patterns.baan)=5 after.choice  after.commit.transaction  after.delete  \
after.display  after.field  \
after.form  after.input  after.program  after.read  after.rewrite  \
after.group  after.skip.delete  after.skip.rewrite  after.skip.write  \
after.update.db.commit  after.write  after.zoom  \
before.checks  before.choice  before.delete  before.display  \
before.display.object  before.field  before.form  before.input  before.layout  \
before.group before.program  before.read  before.rewrite  before.write  before.zoom  \
case check.input  declaration  default  dllusage  \
else  elseif  functions  if  on.input  on.entry  on.exit \
read.view  ref.input  ref.display selectdo  selectempty  selecteos \
when.field.changes  while

#Unindent properties
statement.lookback.$(file.patterns.baan)=1 endif endwhile endfor endselect return

##########============================================================
##caml.properties
##########============================================================
#	Define SciTE settings for Objective Caml, Standard ML 97 files
#
#	To use with Standard ML source in .ml files, select Standard ML
#	from the SciTE Language menu (or adjust the properties below).
#
# To fully enable this Scintilla lexer, make sure the following entries
#	are present and uncommented in your SciTE properties:
#
#		$(filter.caml)\
#		$(filter.sml)\
#
#		Objective Caml|ml||\
#		Standard ML|sml||\
#
#		import caml

# OCaml/SML implementation and interface files
file.patterns.caml=*.ml;*.mli
file.patterns.sml=*.sml

filter.caml=Objective Caml (ml mli)|$(file.patterns.caml)|
filter.sml=Standard ML 97 (sml ml)|$(file.patterns.sml)|

lexer.*.caml=caml
lexer.$(file.patterns.caml)=caml
lexer.$(file.patterns.sml)=caml

# the line below is ONLY used as part of "external" lexer support
#lexerpath.$(file.patterns.caml)=LexCaml.dll
#lexerpath.$(file.patterns.sml)=LexCaml.dll

# the standard Objective Caml 3.09/3.10/3.11 language "textual" keywords
keywordstandard.caml= \
and as assert asr begin class \
constraint do done downto else end \
exception external false for fun function \
functor if in include inherit initializer \
land lazy let lor lsl lsr \
lxor match method mod module mutable \
new object of open or private \
rec sig struct then to true \
try type val virtual when while \
with
keywords.$(file.patterns.caml)=$(keywordstandard.caml)

# the standard Standard ML '97 language "textual" keywords
keywordstandard.sml= \
abstype andalso and as case datatype div do \
else end eqtype exception \
false fn fun functor handle if infixr infix include in let local \
mod nonfix not of open op orelse raise rec \
sharing signature sig structure struct then true type use \
val while withtype with
keywords.$(file.patterns.sml)=$(keywordstandard.sml)

# "optional" Objective Caml / library keywords; some suggested entries are here,
# more could come from, say, Pervasives ('parser' is from Camlp4)
keywordoptional1.caml= \
option Some None ignore ref lnot succ pred parser
keywords2.$(file.patterns.caml)=$(keywordoptional1.caml)

# "optional" Standard ML '97 / library keywords; some suggested entries are here,
# more could come from, say, Standard Basis Library
keywordoptional1.sml= \
option SOME NONE ignore ref \
chr explode implode ord size
keywords2.$(file.patterns.sml)=$(keywordoptional1.sml)

# "optional" Objective Caml / library keywords; some suggested entries are here,
# more could come from, say, user-defined types
keywordoptional2.caml= \
array bool char float int list string unit
keywords3.$(file.patterns.caml)=$(keywordoptional2.caml)

# "optional" Standard ML '97 / library keywords; some suggested entries are here,
# more could come from, say, user-defined types
keywordoptional2.sml= \
array bool char int list nil real string unit vector word
keywords3.$(file.patterns.sml)=$(keywordoptional2.sml)

word.characters.$(file.patterns.caml)=$(chars.alpha)$(chars.numeric)_'`
word.characters.$(file.patterns.sml)=$(chars.alpha)$(chars.numeric)_'

comment.stream.start.caml=(*
comment.stream.end.caml=*)
comment.box.start.caml=(*
comment.box.middle.caml= *
comment.box.end.caml= *)

# "folding" support not currently implemented

# "Out-of-the-box" syntax colors are defined here - I like having
# my literals (number, char, and string), tag-names, and "optional"
# keywords stand out - you might not, so adjust accordingly!
# Default
style.caml.32=$(font.base)
# White space
style.caml.0=fore:#808080
# Identifiers
style.caml.1=
# Tag-names
#style.caml.2=
style.caml.2=fore:#000000,back:#ffe0ff
# Keywords (builtin language-defined keywords)
style.caml.3=$(colour.keyword),bold
# Keywords2 (season to taste - use for option, Some, None, etc)
#style.caml.4=
style.caml.4=fore:#000000,back:#e0e0ff
# Keywords3 (season to taste - use for bool, char, float, etc)
#style.caml.5=
#style.caml.5=fore:#000000,back:#ffe0e0
style.caml.5=fore:#a0000,bold
# Linenum directive
style.caml.6=back:#C0C0C0,$(font.base)
# Operators
style.caml.7=$(colour.operator),bold
# Number
#style.caml.8=$(colour.number)
style.caml.8=fore:#000000,back:#ffff00
# Single quoted string (character constant)
#style.caml.9=$(colour.char)
style.caml.9=fore:#000000,back:#ffff00
# Embedded whitespace (SML character/string constant)
#style.caml.10=
style.caml.10=fore:#000000,back:#e0e0e0
# Double quoted string (string constant)
#style.caml.11=$(colour.string)
style.caml.11=fore:#000000,back:#ffff00
# Comment (NOT nested)
style.caml.12=$(colour.code.comment.box),$(font.code.comment.box)
# Comment (SINGLY nested)
#style.caml.13=$(colour.code.comment.box),$(font.code.comment.box)
style.caml.13=$(colour.embedded.comment),$(font.code.comment.box)
# Comment (DOUBLY nested)
#style.caml.14=$(colour.code.comment.box),$(font.code.comment.box)
style.caml.14=$(colour.embedded.comment),$(font.code.comment.box)
# Comment (TRIPLY nested)
#style.caml.15=$(colour.code.comment.box),$(font.code.comment.box)
style.caml.15=$(colour.embedded.comment),$(font.code.comment.box)

# Braces are only matched in operator style
braces.caml.style=7

# The below command(s) can and should be adjusted to reflect your environment;
# in addition, per-directory overrides are possible, so that project-specific "build"
# commands may be used for more complex cases - see the SciTE documentation.
command.compile.$(file.patterns.caml)=ocamlc -c $(FileNameExt)


##########============================================================
##conf.properties
##########============================================================
# Define SciTE settings for Apache Configuration files.
# contributed by Ahmad Zawawi <zeus_go64@hotmail.com>

file.patterns.conf=*.conf;.htaccess
filter.conf=Apache Conf (conf)|$(file.patterns.conf)|
lexer.$(file.patterns.conf)=conf
# for future implemention...
#api.$(file.patterns.conf)=conf.api

# Keywords for Apache's Runtime directives
keywords.$(file.patterns.conf)=\
acceptmutex acceptpathinfo accessconfig accessfilename \
action addalt addaltbyencoding addaltbytype addcharset \
adddefaultcharset adddescription addencoding \
addhandler addicon addiconbyencoding addiconbytype \
addinputfilter addlanguage addmodule addmoduleinfo \
addoutputfilter addoutputfilterbytype addtype agentlog \
alias aliasmatch all allow allowconnect \
allowencodedslashes allowoverride anonymous \
anonymous_authoritative anonymous_logemail \
anonymous_mustgiveemail anonymous_nouserid \
anonymous_verifyemail assignuserid authauthoritative \
authdbauthoritative authdbgroupfile \
authdbmauthoritative authdbmgroupfile authdbmtype \
authdbmuserfile authdbuserfile authdigestalgorithm \
authdigestdomain authdigestfile authdigestgroupfile \
authdigestnccheck authdigestnonceformat \
authdigestnoncelifetime authdigestqop \
authdigestshmemsize authgroupfile \
authldapauthoritative authldapbinddn \
authldapbindpassword authldapcharsetconfig \
authldapcomparednonserver authldapdereferencealiases \
authldapenabled authldapfrontpagehack \
authldapgroupattribute authldapgroupattributeisdn \
authldapremoteuserisdn authldapurl authname authtype \
authuserfile bindaddress browsermatch \
browsermatchnocase bs2000account bufferedlogs \
cachedefaultexpire cachedirlength cachedirlevels \
cachedisable cacheenable cacheexpirycheck cachefile \
cacheforcecompletion cachegcclean cachegcdaily \
cachegcinterval cachegcmemusage cachegcunused \
cacheignorecachecontrol cacheignoreheaders \
cacheignorenolastmod cachelastmodifiedfactor \
cachemaxexpire cachemaxfilesize cacheminfilesize \
cachenegotiateddocs cacheroot cachesize \
cachetimemargin cgimapextension charsetdefault \
charsetoptions charsetsourceenc checkspelling \
childperuserid clearmodulelist contentdigest \
cookiedomain cookieexpires cookielog cookiename \
cookiestyle cookietracking coredumpdirectory customlog \
dav davdepthinfinity davlockdb davmintimeout \
defaulticon defaultlanguage defaulttype define \
deflatebuffersize deflatecompressionlevel \
deflatefilternote deflatememlevel deflatewindowsize \
deny directory directoryindex directorymatch \
directoryslash documentroot dumpioinput dumpiooutput \
enableexceptionhook enablemmap enablesendfile \
errordocument errorlog example expiresactive \
expiresbytype expiresdefault extendedstatus \
extfilterdefine extfilteroptions fancyindexing \
fileetag files filesmatch forcelanguagepriority \
forcetype forensiclog from group header headername \
hostnamelookups identitycheck ifdefine ifmodule \
imapbase imapdefault imapmenu include indexignore \
indexoptions indexorderdefault isapiappendlogtoerrors \
isapiappendlogtoquery isapicachefile isapifakeasync \
isapilognotsupported isapireadaheadbuffer keepalive \
keepalivetimeout languagepriority ldapcacheentries \
ldapcachettl ldapconnectiontimeout ldapopcacheentries \
ldapopcachettl ldapsharedcachefile ldapsharedcachesize \
ldaptrustedca ldaptrustedcatype limit limitexcept \
limitinternalrecursion limitrequestbody \
limitrequestfields limitrequestfieldsize \
limitrequestline limitxmlrequestbody listen \
listenbacklog loadfile loadmodule location \
locationmatch lockfile logformat loglevel maxclients \
maxkeepaliverequests maxmemfree maxrequestsperchild \
maxrequestsperthread maxspareservers maxsparethreads \
maxthreads maxthreadsperchild mcachemaxobjectcount \
mcachemaxobjectsize mcachemaxstreamingbuffer \
mcacheminobjectsize mcacheremovalalgorithm mcachesize \
metadir metafiles metasuffix mimemagicfile \
minspareservers minsparethreads mmapfile \
modmimeusepathinfo multiviewsmatch namevirtualhost \
nocache noproxy numservers nwssltrustedcerts \
nwsslupgradeable options order passenv pidfile port \
protocolecho proxy proxybadheader proxyblock \
proxydomain proxyerroroverride proxyiobuffersize \
proxymatch proxymaxforwards proxypass proxypassreverse \
proxypreservehost proxyreceivebuffersize proxyremote \
proxyremotematch proxyrequests proxytimeout proxyvia \
qsc readmename redirect redirectmatch \
redirectpermanent redirecttemp refererignore \
refererlog removecharset removeencoding removehandler \
removeinputfilter removelanguage removeoutputfilter \
removetype requestheader require resourceconfig \
rewritebase rewritecond rewriteengine rewritelock \
rewritelog rewriteloglevel rewritemap rewriteoptions \
rewriterule rlimitcpu rlimitmem rlimitnproc satisfy \
scoreboardfile script scriptalias scriptaliasmatch \
scriptinterpretersource scriptlog scriptlogbuffer \
scriptloglength scriptsock securelisten sendbuffersize \
serveradmin serveralias serverlimit servername \
serverpath serverroot serversignature servertokens \
servertype setenv setenvif setenvifnocase sethandler \
setinputfilter setoutputfilter singlelisten ssiendtag \
ssierrormsg ssistarttag ssitimeformat ssiundefinedecho \
sslcacertificatefile sslcacertificatepath \
sslcarevocationfile sslcarevocationpath \
sslcertificatechainfile sslcertificatefile \
sslcertificatekeyfile sslciphersuite sslengine \
sslmutex ssloptions sslpassphrasedialog sslprotocol \
sslproxycacertificatefile sslproxycacertificatepath \
sslproxycarevocationfile sslproxycarevocationpath \
sslproxyciphersuite sslproxyengine \
sslproxymachinecertificatefile \
sslproxymachinecertificatepath sslproxyprotocol \
sslproxyverify sslproxyverifydepth sslrandomseed \
sslrequire sslrequiressl sslsessioncache \
sslsessioncachetimeout sslusername sslverifyclient \
sslverifydepth startservers startthreads \
suexecusergroup threadlimit threadsperchild \
threadstacksize timeout transferlog typesconfig \
unsetenv usecanonicalname user userdir \
virtualdocumentroot virtualdocumentrootip virtualhost \
virtualscriptalias virtualscriptaliasip \
win32disableacceptex xbithack

#common parameters for Apache runtime configuration
keywords2.$(file.patterns.conf)=\
on off standalone inetd \
force-response-1.0 downgrade-1.0 nokeepalive \
indexes includes followsymlinks none \
x-compress x-gzip

# whitespace (SCE_CONF_DEFAULT)
style.conf.0=fore:#808080,$(font.base)
# Comment (SCE_CONF_COMMENT)
style.conf.1=fore:#007F00,$(font.comment)
# Number (SCE_CONF_NUMBER)
style.conf.2=fore:#007F7F
# identifier (SCE_CONF_IDENTIFIER)
style.conf.9=fore:#00007F,bold
# extensions (like .gz, .tgz, .html) (SCE_CONF_EXTENSION)
style.conf.4=fore:#000000,back:#FFE0FF
# parameters for Apache Runtime directives (SCE_CONF_PARAMETER)
style.conf.5=fore:#000000,back:#FFE0FF
# Double quoted string (SCE_CONF_STRING)
style.conf.6=fore:#7F007F,$(font.monospace)
# Operators (SCE_CONF_OPERATOR)
style.conf.7=bold
# IP address (SCE_CONF_IP)
style.conf.8=fore:#007F7F,bold
# Apache Runtime Directive (SCE_CONF_DIRECTIVE)
style.conf.3=fore:#000000,back:#A0FFA0

# compiling/building simply checks for the correct symantics....
command.compile.$(file.patterns.conf)=httpd -t -f $(FilePath)
command.build.$(file.patterns.conf)=httpd -t -f $(FilePath)


##########============================================================
##eiffel.properties
##########============================================================
# Define SciTE settings for Eiffel files.

filter.eiffel=Eiffel (e)|*.e|

file.patterns.eiffel=*.e

# Main Eiffel lexer dows indentation based folding
lexer.$(file.patterns.eiffel)=eiffel
# Alternative key word based folding has trouble with redefine and rename clauses
#lexer.$(file.patterns.eiffel)=eiffelkw

# These keywords are case insensitive although Eiffel has conventions for
# keywords, predefined names and predefined classes: alias, Current, BOOLEAN
# Could differentiate between these
keywordclass.eiffel=\
alias all and any as bit boolean \
check class character clone create creation current \
debug deferred div do double \
else elseif end ensure equal expanded export external \
false feature forget from frozen general \
if implies indexing infix inherit inspect integer invariant is \
language like local loop mod name nochange none not \
obsolete old once or platform pointer prefix precursor \
real redefine rename require rescue result retry \
select separate string strip then true undefine unique until \
variant void when xor

keywords.$(file.patterns.eiffel)=$(keywordclass.eiffel)

# Eiffel styles
# Default
style.eiffel.0=fore:#808080
style.eiffelkw.0=$(style.eiffel.0)
# Line comment
style.eiffel.1=$(colour.code.comment.line),$(font.code.comment.line)
style.eiffelkw.1=$(style.eiffel.1)
# Number
style.eiffel.2=$(colour.number)
style.eiffelkw.2=$(style.eiffel.2)
# Keyword
style.eiffel.3=$(colour.keyword),bold
style.eiffelkw.3=$(style.eiffel.3)
# String
style.eiffel.4=$(colour.string),$(font.monospace)
style.eiffelkw.4=$(style.eiffel.4)
# Character
style.eiffel.5=$(colour.char),$(font.monospace)
style.eiffelkw.5=$(style.eiffel.5)
# Operators
style.eiffel.6=$(colour.operator),bold
style.eiffelkw.6=$(style.eiffel.6)
# Identifier
style.eiffel.7=
style.eiffelkw.7=$(style.eiffel.7)
# End of line where string is not closed
style.eiffel.8=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
style.eiffelkw.8=$(style.eiffel.8)
# Braces are only matched in operator style
braces.eiffel.style=6
braces.eiffelkw.style=$(braces.eiffel.style)

statement.indent.$(file.patterns.eiffel)=5 do else elsif rescue if is loop
statement.end.$(file.patterns.eiffel)=10 ;
statement.lookback.$(file.patterns.eiffel)=20
block.start.$(file.patterns.eiffel)=10 check debug deferred do from if inspect once
block.end.$(file.patterns.eiffel)=10 end

command.compile.*.e=compile $(FileName)

##########============================================================
##escript.properties
##########============================================================
# the directory of the ecompile.exe
ECOMPILEHOME=C:\Daten\Code\CVS Workspace\etheria-pol095\scripts

#
# Define SciTE settings for ESCRIPT files.
#
filter.escript=E-Script (src em)|$(file.patterns.escript)|
#filter.escript=E-Script (src inc cfg em)|$(file.patterns.escript)|
file.patterns.escript=*.src;*.em
#file.patterns.escript=*.src;*.inc;*.cfg;*.em

lexer.$(file.patterns.escript)=escript
escript.case.sensitive=0


command.compile.*.src="$(ECOMPILEHOME)\ecompile.exe" $(FileNameExt)

# Default
style.escript.0=$(font.base)
# Comment
style.escript.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment
style.escript.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment
style.escript.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.escript.4=$(colour.number)
# Keyword
style.escript.5=fore:#FF4000
# Double quoted string
style.escript.6=fore:#FF8000,$(font.string.literal)
# Operators
style.escript.7=fore:#FF0000
#~ Identifiers
style.escript.8=
# Braces
style.escript.9=fore:#0000FF
# Keywords2
style.escript.10=fore:#B00040
# Keywords3
style.escript.11=fore:#B00040
#~ Braces are only matched in brace style
#braces.escript.style=9



keywords.$(file.patterns.escript)=\
basic basicio boats \
cfgfile \
file \
http \
npc \
os \
uo util \
accessible \
addmenuitem \
appendconfigfileelem \
applyconstraint \
applydamage \
applyrawdamage \
assignrecttoweatherregion \
append \
baseskilltorawskill \
boatfromitem \
broadcast \
ban \
cdbl \
cint \
cstr \
checklineofsight \
checklosat \
checkskill \
consumemana \
consumereagents \
consumesubstance \
createaccount \
createitematlocation \
createiteminbackpack \
createitemininventory \
createitemincontainer \
createmenu \
createmultiatlocation \
createnpcfromtemplate \
createrootiteminstoragearea \
createstoragearea \
clear_script_profile_counters \
close \
damage \
destroyitem \
destroymulti \
destroyrootiteminstoragearea \
detach \
disableevents \
disconnectclient \
distance \
disable \
enableevents \
enumerateitemsincontainer \
enumerateonlinecharacters \
equipfromtemplate \
equipitem \
eraseglobalproperty \
eraseobjproperty \
enable \
enabled \
erase \
events_waiting \
exists \
findconfigelem \
findobjtypeincontainer \
findrootiteminstoragearea \
findstoragearea \
fclose \
find \
fopen \
fread \
fseek \
ftell \
fwrite \
gamestat \
getamount \
getcommandhelp \
getconfigint \
getconfigintkeys \
getconfigmaxintkey \
getconfigreal \
getconfigstring \
getconfigstringkeys \
getconfigstringarray \
getelemproperty \
getequipmentbylayer \
getglobalproperty \
getharvestdifficulty \
getmapinfo \
getmenuobjtypes \
getobjproperty \
getobjtype \
getobjtypebyname \
getproperty \
getrawskill \
getregionstring \
getskill \
getspelldifficulty \
getstandingheight \
getworldheight \
grantprivilege \
harvestresource \
healdamage \
hex \
islegalmove \
insert \
keys \
listequippeditems \
listghostsnearlocation \
listhostiles \
listitemsatlocation \
listitemsnearlocation \
listitemsnearlocationoftype \
listmobilesinlineofsight \
listmobilesnearlocation \
listmobilesnearlocationex \
listobjectsinbox \
loadtusscpfile \
left \
len \
log_profile \
lower \
makeboundingbox \
move \
moveboat \
moveboatrelative \
movecharactertolocation \
moveitemtocontainer \
moveitemtolocation \
move_offline_mobiles \
openpaperdoll \
open \
pack \
performaction \
playlightningbolteffect \
playmovingeffect \
playmovingeffectxyz \
playobjectcenteredeffect \
playsoundeffect \
playsoundeffectprivate \
playstationaryeffect \
printtextabove \
printtextaboveprivate \
packages \
polcore \
position \
print \
queryparam \
randomdiceroll \
randomint \
rawskilltobaseskill \
readconfigfile \
readgameclock \
releaseitem \
registerforspeechevents \
registeritemwithboat \
requestinput \
reserveitem \
restartscript \
resurrect \
revokeprivilege \
runawayfrom \
runawayfromlocation \
runtoward \
runtowardlocation \
reverse \
run_script_to_completion \
saveworldstate \
selectmenuitem2 \
self \
sendbuywindow \
senddialoggump \
sendevent \
sendopenspecialcontainer \
sendpacket \
sendsellwindow \
sendskillwindow \
sendstringastipwindow \
sendsysmessage \
sendtextentrygump \
setanchor \
setglobalproperty \
setname \
setobjproperty \
setopponent \
setproperty \
setrawskill \
setregionlightlevel \
setregionweatherlevel \
setscriptcontroller \
setwarmode \
shutdown \
speakpowerwords \
splitwords \
startspelleffect \
subtractamount \
systemfindboatbyserial \
systemfindobjectbyserial \
say \
set_critical \
set_debug \
set_priority \
set_priority_divide \
set_script_option \
setcmdlevel \
setdex \
setint \
setlightlevel \
setmaster \
setname \
setpassword \
setstr \
shrink \
size \
sleep \
sleepms \
sort \
spendgold \
squelch \
start_script \
syslog \
system_rpm \
target \
targetcoordinates \
targetmultiplacement \
turnawayfrom \
turnawayfromlocation \
turnboat \
turntoward \
turntowardlocation \
toggle \
unloadconfigfile \
unpack \
unban \
unload_scripts \
upper \
walkawayfrom \
walkawayfromlocation \
walktoward \
walktowardlocation \
wander \
writehtml \
writehtmlraw \
wait_for_event \
movechar_forcelocation \
moveitem_forcelocation \
moveitem_normal \
scriptopt_debug \
scriptopt_no_interrupt \
scriptopt_no_runaway \
te_cancel_disable \
te_cancel_enable \
te_style_disable \
te_style_normal \
te_style_numerical \
tgtopt_check_los \
tgtopt_harmful \
tgtopt_helpful \
tgtopt_neutral \
tgtopt_nocheck_los \
setprop \
getprop


keywords2.$(file.patterns.escript)=\
array \
const \
dictionary \
global \
local \
var \
and \
default \
in \
next not \
or \
return \
to \
include \
use \
enum


keywords3.$(file.patterns.escript)=\
while \
for \
endfor \
function \
program \
endprogram endfunction \
foreach \
case \
else elseif \
if endcase endenum endforeach endif endwhile




##########============================================================
##fortran.properties
##########============================================================
# Define SciTE settings for Fortran files.

filter.fortran=Fortran (f for f90 f95 f2k)|*.f;*.for;*.f90;*.f95;*.f2k|

file.patterns.f95=*.f90;*.f95;*.f2k
file.patterns.f77=*.f;*.for
file.patterns.fortran=$(file.patterns.f95);$(file.patterns.f77)

lexer.$(file.patterns.f95)=fortran
lexer.$(file.patterns.f77)=f77

# keywords and input/output specifiers
keywordclass.fortran=access action advance allocatable allocate \
apostrophe assign assignment associate asynchronous backspace \
bind blank blockdata call case character class close common \
complex contains continue cycle data deallocate decimal delim \
default dimension direct do dowhile double doubleprecision else \
elseif elsewhere encoding end endassociate endblockdata enddo \
endfile endforall endfunction endif endinterface endmodule endprogram \
endselect endsubroutine endtype endwhere entry eor equivalence \
err errmsg exist exit external file flush fmt forall form format \
formatted function go goto id if implicit in include inout \
integer inquire intent interface intrinsic iomsg iolength \
iostat kind len logical module name named namelist nextrec nml \
none nullify number only open opened operator optional out pad \
parameter pass pause pending pointer pos position precision \
print private procedure program protected public quote read readwrite \
real rec recl recursive result return rewind save select \
selectcase selecttype sequential sign size stat status stop stream \
subroutine target then to type unformatted unit use value \
volatile wait where while write

keywords.$(file.patterns.f95)=$(keywordclass.fortran)
keywords.$(file.patterns.f77)=$(keywordclass.fortran)

# keywords2 is for highlighting intrinsic and extended functions
keywords2.$(file.patterns.fortran)=abs achar acos acosd adjustl adjustr \
aimag aimax0 aimin0 aint ajmax0 ajmin0 akmax0 akmin0 all allocated alog \
alog10 amax0 amax1 amin0 amin1 amod anint any asin asind associated \
atan atan2 atan2d atand bitest bitl bitlr bitrl bjtest bit_size bktest break \
btest cabs ccos cdabs cdcos cdexp cdlog cdsin cdsqrt ceiling cexp char \
clog cmplx conjg cos cosd cosh count cpu_time cshift csin csqrt dabs \
dacos dacosd dasin dasind datan datan2 datan2d datand date \
date_and_time dble dcmplx dconjg dcos dcosd dcosh dcotan ddim dexp \
dfloat dflotk dfloti dflotj digits dim dimag dint dlog dlog10 dmax1 dmin1 \
dmod dnint dot_product dprod dreal dsign dsin dsind dsinh dsqrt dtan dtand \
dtanh eoshift epsilon errsns exp exponent float floati floatj floatk floor fraction \
free huge iabs iachar iand ibclr ibits ibset ichar idate idim idint idnint ieor ifix \
iiabs iiand iibclr iibits iibset iidim iidint iidnnt iieor iifix iint iior iiqint iiqnnt iishft \
iishftc iisign ilen imax0 imax1 imin0 imin1 imod index inint inot int int1 int2 int4 \
int8 iqint iqnint ior ishft ishftc isign isnan izext jiand jibclr jibits jibset jidim jidint \
jidnnt jieor jifix jint jior jiqint jiqnnt jishft jishftc jisign jmax0 jmax1 jmin0 jmin1 \
jmod jnint jnot jzext kiabs kiand kibclr kibits kibset kidim kidint kidnnt kieor kifix \
kind kint kior kishft kishftc kisign kmax0 kmax1 kmin0 kmin1 kmod knint knot kzext \
lbound leadz len len_trim lenlge lge lgt lle llt log log10 logical lshift malloc matmul \
max max0 max1 maxexponent maxloc maxval merge min min0 min1 minexponent minloc \
minval mod modulo mvbits nearest nint not nworkers number_of_processors pack popcnt \
poppar precision present product radix random random_number random_seed range real \
repeat reshape rrspacing rshift scale scan secnds selected_int_kind \
selected_real_kind set_exponent shape sign sin sind sinh size sizeof sngl snglq spacing \
spread sqrt sum system_clock tan tand tanh tiny transfer transpose trim ubound unpack verify

# keywords3 are nonstardard, extended and user defined functions
keywords3.$(file.patterns.fortran)=cdabs cdcos cdexp cdlog cdsin cdsqrt cotan cotand \
dcmplx dconjg dcotan dcotand decode dimag dll_export dll_import doublecomplex dreal \
dvchk encode find flen flush getarg getcharqq getcl getdat getenv gettim hfix ibchng \
identifier imag int1 int2 int4 intc intrup invalop iostat_msg isha ishc ishl jfix \
lacfar locking locnear map nargs nbreak ndperr ndpexc offset ovefl peekcharqq precfill \
prompt qabs qacos qacosd qasin qasind qatan qatand qatan2 qcmplx qconjg qcos qcosd \
qcosh qdim qexp qext qextd qfloat qimag qlog qlog10 qmax1 qmin1 qmod qreal qsign qsin \
qsind qsinh qsqrt qtan qtand qtanh ran rand randu rewrite segment setdat settim system \
timer undfl unlock union val virtual volatile zabs zcos zexp zlog zsin zsqrt

#fold.comment.fortran=1
#fold.quotes.fortran=1

comment.block.fortran=!~

# These setting do not work very well for FORTRAN, uncoment to use it
# statement.indent.$(file.patterns.fortran)=8 associate block blockdata case do enum \
# 	function interface module program subroutine then type where

# Fortran styles
# Default
style.fortran.0=fore:#808080
style.f77.0=fore:#808080
style.fortran.32=
style.f77.32=
# Comment
style.fortran.1=$(colour.code.comment.line),$(font.code.comment.line)
style.f77.1=$(colour.code.comment.line),$(font.code.comment.line)
# Number
style.fortran.2=$(colour.number)
style.f77.2=$(colour.number)
# Single quoted string
style.fortran.3=$(colour.string)
style.f77.3=$(colour.string)
# Double quoted string
style.fortran.4=$(colour.string)
style.f77.4=$(colour.string)
# End of line where string is not closed
style.fortran.5=fore:#000000,back:#E0C0E0,eolfilled
style.f77.5=fore:#000000,back:#E0C0E0,eolfilled
# Operators
style.fortran.6=$(colour.operator),bold
style.f77.6=$(colour.operator),bold
# Identifiers
style.fortran.7=
style.f77.7=
# Keywords
style.fortran.8=$(colour.keyword),case:u
style.f77.8=$(colour.keyword),case:u
# Keywords2
style.fortran.9=fore:#B00040
style.f77.9=fore:#B00040
# Keywords3
style.fortran.10=fore:#B04080
style.f77.10=fore:#B04080
# Preprocessor
style.fortran.11=$(colour.preproc)
style.f77.11=$(colour.preproc)
# Operators in .NAME. format
style.fortran.12=$(colour.operator),bold
style.f77.12=$(colour.operator),bold
# Labels
style.fortran.13=fore:#E0C0E0
style.f77.13=fore:#E0C0E0
# Continuation
style.fortran.14=fore:#000000,back:#F0E080
style.f77.14=fore:#000000,back:#F0E080
# Braces are matched in all cases
braces.fortran.style=0

if PLAT_WIN
	fc77=lf95 $(FileNameExt) -c -fix
	fc90=lf95 $(FileNameExt) -c
if PLAT_GTK
	fc77=f77 -c -o $(FileName).o $(FileNameExt)
	fc90=f90 -c -o $(FileName).o $(FileNameExt)

command.compile.*.f=$(fc77)
command.build.*.f=make
command.go.*.f=$(FileName)

command.compile.*.for=$(fc77)
command.build.*.for=make
command.go.*.for=$(FileName)

command.compile.*.f90=$(fc90)
command.build.*.f90=make
command.go.*.f90=$(FileName)

command.compile.*.f95=$(fc90)
command.build.*.f95=make
command.go.*.f95=$(FileName)

if PLAT_WIN
    api.$(file.patterns.fortran)=$(SciteDefaultHome)\fortran.api

autocomplete.fortran.ignorecase=1
autocomplete.f77.ignorecase=1
calltip.fortran.ignorecase=1
calltip.f77.ignorecase=1


##########============================================================
##lot.properties
##########============================================================
# Define SciTE settings for lot files.
file.patterns.lot=*.lot

filter.lot=Lot (lot)|$(file.patterns.lot)|

lexer.$(file.patterns.lot)=lot

word.characters.$(file.patterns.lot)=$(chars.alpha)$(chars.numeric)

# LOT FileStyles
# Default
style.lot.0=fore:#000000
# header
style.lot.1=back:#00F0FF,eolfilled
# break
style.lot.2=back:#FFFF00,eolfilled
# set
 style.lot.3=fore:#FFFFFF,back:#0000FF,bold,eolfilled
# pass
 style.lot.4=back:#00FF00,eolfilled
# fail
style.lot.5=back:#FF0000,eolfilled,bold
# abort
style.lot.6=back:#0000FF,bold,eolfilled


##########============================================================
##matlab.properties
##########============================================================
# Define SciTE settings for Octave and Matlab (see below) files.

# set the default lexer for .m files
DEFAULT_M_LEXER_OCTAVE=1
DEFAULT_M_LEXER_MATLAB=0

#-----------------------------------------------------------------------
# Octave
#-----------------------------------------------------------------------

# M: Octave M-Files (we nee .m.octave for distinguishing it from matlab)
file.patterns.octave=*.m.octave
#~ if DEFAULT_M_LEXER_OCTAVE
	#~ file.patterns.octave=*.m;$(file.patterns.octave)
file.patterns.matlab=*.m;*.m.octave

# M: Octave M-Files
filter.octave=Octave (m)|$(file.patterns.octave)|

lexer.$(file.patterns.octave)=octave

keywordclass.octave=\
break \
case \
catch \
continue \
do \
else \
elseif \
end \
end_unwind_protect \
endfor \
endif \
endswitch \
endwhile \
for \
function endfunction \
global \
if \
otherwise \
persistent \
return \
switch \
try \
until \
unwind_protect \
unwind_protect_cleanup \
while

keywords.$(file.patterns.octave)=$(keywordclass.octave)

comment.block.octave=#

# Octave styles
# White space
style.octave.0=fore:#000000
# Comment
style.octave.1=$(colour.code.comment.line),$(font.code.comment.line)
# Command
style.octave.2=$(colour.preproc)
# Number
style.octave.3=$(colour.number)
# Keyword
style.octave.4=$(colour.keyword),bold
# String (5: single quoted, 8: double quoted)
style.octave.5=$(colour.string)
style.octave.8=$(colour.string)
# Operator
style.octave.6=$(colour.operator),bold
# Identifier
style.octave.7=

#-----------------------------------------------------------------------
# Matlab
#-----------------------------------------------------------------------

# M: Matlab M-Files (we need .m.matlab to distinguish it from octave)
file.patterns.matlab=*.m.matlab
#~ if DEFAULT_M_LEXER_MATLAB
	#~ file.patterns.matlab=*.m;$(file.patterns.matlab)
# M: Matlab M-Files
filter.matlab=Matlab (m)|$(file.patterns.matlab)|

lexer.$(file.patterns.matlab)=matlab

keywordclass.matlab=break case catch continue else elseif end for function \
global if otherwise persistent return switch try while

keywords.$(file.patterns.matlab)=$(keywordclass.matlab)

comment.block.matlab=%~

# Matlab styles
# White space
style.matlab.0=fore:#000000
# Comment
style.matlab.1=$(colour.code.comment.line),$(font.code.comment.line)
# Command
style.matlab.2=$(colour.preproc)
# Number
style.matlab.3=$(colour.number)
# Keyword
style.matlab.4=$(colour.keyword),bold
# String (5=single quoted, 8=double quoted)
style.matlab.5=$(colour.string)
style.matlab.8=$(colour.string)
# Operator
style.matlab.6=$(colour.operator),bold
# Identifier
style.matlab.7=

