
##########============================================================
##metapost.properties
##########============================================================
# file    : metapost.properties
# version : 18 august 2003
# author  : Hans Hagen / PRAGMA ADE / www.pragma-ade.com

# Metapost: patterns

file.patterns.metapost=*.mp;*.mpx
file.patterns.metafun=*.mp;*.mpx;*.mpy

filter.metapost=MetaPost|$(file.patterns.metapost)|
filter.metafun=MetaFun|$(file.patterns.metafun)|

lexer.$(file.patterns.metapost)=metapost
lexer.$(file.patterns.metafun)=metapost

# Metapost: commands (check process view)

command.compile.$(file.patterns.metapost)=
command.build.$(file.patterns.metapost)=mpost $(FileNameExt)
command.go.$(file.patterns.metapost)=gv $(FileName).1

command.compile.$(file.patterns.metafun)=
command.build.$(file.patterns.metafun)=texexec --mptex $(FileNameExt)
command.go.$(file.patterns.metafun)=gv $(FileName).1


command.0.$(file.patterns.metapost)=
command.1.$(file.patterns.metapost)=
command.2.$(file.patterns.metapost)=
command.3.$(file.patterns.metapost)=
command.4.$(file.patterns.metapost)=
command.5.$(file.patterns.metapost)=
command.6.$(file.patterns.metapost)=
command.7.$(file.patterns.metapost)=
command.8.$(file.patterns.metapost)=
command.9.$(file.patterns.metapost)=

command.0.$(file.patterns.metafun)=
command.1.$(file.patterns.metafun)=
command.2.$(file.patterns.metafun)=
command.3.$(file.patterns.metafun)=
command.4.$(file.patterns.metafun)=
command.5.$(file.patterns.metafun)=
command.6.$(file.patterns.metafun)=
command.7.$(file.patterns.metafun)=
command.8.$(file.patterns.metafun)=
command.9.$(file.patterns.metafun)=



# Metapost: highlighting

# Default
style.metapost.0=fore:#3F3F3F
# Special
style.metapost.1=fore:#007F7F
# Group
style.metapost.2=fore:#7F0000
# Symbol
style.metapost.3=fore:#7F7F00
# Command
style.metapost.4=fore:#007F00
# Text
style.metapost.5=fore:#000000
# Extra
style.metapost.6=fore:#007F00,italics


style.metapost.34=fore:#00007F
style.metapost.35=fore:#7F007F

# Metapost: comments

comment.block.metapost=%
comment.block.at.line.start.metapost=1





# Metapost: lexer.metapost.interface.default
#
# 0 not used
# 1 metapost primitives and commands
# 2 metafun macros
#
# first lines of a metapost file are interpreted as follows:
#
# % interface=none|metapost|mp|metafun

lexer.metapost.interface.default=1

# Metapost: lexer.metapost.comment.process
#
# 0 don't interpret comment
# 1 color comment like source code

lexer.metapost.comment.process=0

# Metapost: keywords

keywordclass.metapost.tex=\
    btex verbatimtex etex

keywordclass.metapost.primitives=\
    charcode day linecap linejoin miterlimit month pausing \
    prologues showstopping time tracingcapsules tracingchoices \
    tracingcommands tracingequations tracinglostchars \
    tracingmacros tracingonline tracingoutput tracingrestores \
    tracingspecs tracingstats tracingtitles truecorners \
    warningcheck year \
    false nullpicture pencircle true \
    and angle arclength arctime ASCII bluepart boolean bot \
    char color cosd cycle decimal directiontime floor fontsize \
    greenpart hex infont intersectiontimes known length llcorner \
    lrcorner makepath makepen mexp mlog normaldeviate not \
    numeric oct odd or path pair pen penoffset picture point \
    postcontrol precontrol redpart reverse rotated scaled \
    shifted sind slanted sqrt str string subpath substring \
    transform transformed ulcorner uniformdeviate unknown \
    urcorner xpart xscaled xxpart xypart ypart yscaled yxpart \
    yypart zscaled \
    addto clip input interim let newinternal save setbounds \
    shipout show showdependencies showtoken showvariable \
    special \
    begingroup endgroup of curl tension and controls \
    reflectedabout rotatedaround interpath on off beginfig \
    endfig def vardef enddef epxr suffix text primary secondary \
    tertiary primarydef secondarydef tertiarydef top bottom \
    ulft urt llft lrt randomseed also contour doublepath \
    withcolor withpen dashed if else elseif fi for endfor forever exitif \
    forsuffixes downto upto step until \
    charlist extensible fontdimen headerbyte kern ligtable \
    boundarychar chardp charext charht charic charwd designsize \
    fontmaking charexists \
    cullit currenttransform gfcorners grayfont hround \
    imagerules lowres_fix nodisplays notransforms openit \
    displaying currentwindow screen_rows screen_cols \
    pixels_per_inch cull display openwindow numspecial \
    totalweight autorounding fillin proofing tracingpens \
    xoffset chardx granularity smoothing turningcheck yoffset \
    chardy hppp tracingedges vppp \
    extra_beginfig extra_endfig mpxbreak \
    end

keywordclass.metapost.plain=\
    ahangle ahlength bboxmargin defaultpen defaultscale \
    labeloffset background currentpen currentpicture cuttings \
    defaultfont extra_beginfig extra_endfig \
    beveled black blue bp butt cc cm dd ditto down epsilon \
    evenly fullcircle green halfcircle identity in infinity left \
    mitered mm origin pensquare pt quartercircle red right \
    rounded squared unitsquare up white withdots \
    abs bbox ceiling center cutafter cutbefore dir \
    directionpoint div dotprod intersectionpoint inverse mod lft \
    round rt unitvector whatever \
    cutdraw draw drawarrow drawdblarrow fill filldraw drawdot \
    loggingall pickup tracingall tracingnone undraw unfill \
    unfilldraw \
    buildcycle dashpattern decr dotlabel dotlabels drawoptions \
    incr label labels max min thelabel z \
    beginchar blacker capsule_end change_width \
    define_blacker_pixels define_corrected_pixels \
    define_good_x_pixels define_good_y_pixels \
    define_horizontal_corrected_pixels define_pixels \
    define_whole_blacker_pixels define_whole_pixels \
    define_whole_vertical_blacker_pixels \
    define_whole_vertical_pixels endchar extra_beginchar \
    extra_endchar extra_setup font_coding_scheme\
    font_extra_space

keywordclass.metapost.all=\
    $(keywordclass.metapost.tex) \
    $(keywordclass.metapost.primitives) \
    $(keywordclass.metapost.plain)

keywordclass.metafun.all=

keywords.$(file.patterns.metapost)=$(keywordclass.metapost.all)

keywords.$(file.patterns.metafun)=$(keywordclass.metapost.all)
keywords2.$(file.patterns.metafun)=$(keywordclass.metafun.all)

##  Metapost fold points
## keywords4  = fold beginning; keywords5 = fold ending.
keywords4.$(file.patterns.metapost)=beginfig for verbatimtex def begingroup
if btex forsuffixes \
 vardef primarydef
keywords5.$(file.patterns.metapost)=etex fi endfig endgroup end endfor endif
enddef

#import metafun-scite.properties

# Metapost: end of file




##########============================================================
##mmixal.properties
##########============================================================

# Define SciTE settings for MMIXAL files.

file.patterns.mmixal=*.mms
filter.mmixal=MMIXAL (mms)|$(file.patterns.mmixal)|

lexer.$(file.patterns.mmixal)=mmixal

opcodes=2ADDU 4ADDU 8ADDU 16ADDU ADD ADDU AND ANDNH ANDNL ANDNMH ANDNML \
	BDIF BEV BN BNN BNP BNZ BOD BP BSPEC BYTE BZ CMP CMPU CSEV CSN CSNN CSNP CSNZ CSOD CSP CSWAP CSZ \
	DIV DIVU ESPEC EXPR FADD FCMP FCMPE FDIV FEQL FEQLE FIX FIXU FLOT FLOTU FMUL FREM FSQRT FSUB FUN FUNE \
	GET GETA GO GREG I_BIT INCH INCL INCMH INCML IS JMP LDA LDB LDBU LDHT LDO LDOU LDSF LDT LDTU LDUNC LDVTS LDW LDWU LOC LOCAL \
	MOR MUL MULU MUX MXOR NAND NEG NEGU NNIX NOR NXOR O_BIT OCTA ODIF OR ORH ORL ORMH ORML ORN \
	PBEV PBN PBNN PBNP PBNZ PBOD PBP PBZ POP PREFIX PREGO PRELD PREST PUSHGO PUSHJ PUT \
	RESUME SAVE SET SETH SETL SETMH SETML SFLOT SFLOTU SL SLU SR SRU \
	STB STBU STCO STHT STO STOU STSF STT STTU STUNC STW STWU SUB SUBU SWYM SYNC SYNCD TDIF TETRA TRAP TRIP UNSAVE \
	WDIF WYDEXOR ZSEV ZSN ZSNN ZSNP ZSNZ ZSOD ZSP ZSZ

special_register=rA rB rC rD rE rF rG rH rI rJ rK rL rM rN rO rP rQ rR rS rT rU rV rW rX rY rZ rBB rTT rWW rXX rYY rZZ

predef_symbols=@ Text_Segment Data_Segment Pool_Segment Stack_Segment \
	StdErr StdIn StdOut \
	Fopen Fclose Fread Fwrite Fgets Fputs Fgetws Fputws Ftell Fseek \
	TextRead TextWrite BinaryRead BinaryWrite BinaryReadWrite

keywords.$(file.patterns.mmixal)=$(opcodes)
keywords2.$(file.patterns.mmixal)=$(special_register)
keywords3.$(file.patterns.mmixal)=$(predef_symbols)

# Divsion of leading whitespace in line
style.mmixal.0=
# Comment
style.mmixal.1=$(colour.code.comment.line),$(font.code.comment.line)
# Label
style.mmixal.2=$(font.base)
# Opcode (not validated)
style.mmixal.3=
# Division between Label and Opcode
style.mmixal.4=
# Valid Opcode (as defined in opcodes above)
style.mmixal.5=$(colour.keyword),bold
# Unknown Opcode
style.mmixal.6=$(colour.error)
# Division between Opcode and Operands
style.mmixal.7=
# Division of Operands
style.mmixal.8=
# Number
style.mmixal.9=$(colour.number)
# Reference (to a Label)
style.mmixal.10=$(font.base)
# Char
style.mmixal.11=$(colour.char)
# String
style.mmixal.12=$(colour.string)
# Register (also special_register as defined above)
style.mmixal.13=fore:#7F007F
# Hexadecimal Number
style.mmixal.14=fore:#7F0000
# Operator
style.mmixal.15=bold
# Symbol (as defined in predef_symbols above)
style.mmixal.16=fore:#FF7777
# Include for those who use the preprocessor mmixali written by R. Loos.
# Comment otherwise.
#~ style.mmixal.17=$(colour.preproc)
style.mmixal.17=$(colour.code.comment.line),$(font.code.comment.line)

comment.block.mmixal=%

tab.size.$(file.patterns.mmixal)=16
indent.size.$(file.patterns.mmixal)=16

command.compile.$(file.patterns.mmixal)=mmixal -l $(FileName).map -b 200 $(FilePath)
command.go.$(file.patterns.mmixal)=mmix $(1) $(FileName).mmo
#~ mmotype
command.name.2.$(file.patterns.mmixal)=mmotype
command.2.$(file.patterns.mmixal)=mmotype $(FileName).mmo $(FileName).out


##########============================================================
##pascal.properties
##########============================================================
# Define SciTE settings for Pascal files.
# Changed by Fernando Lozano <fsl@centroin.com.br> for Free Pascal
# Changed by Mathias Rauen <scite@madshi.net> for Delphi
# Changed by Marko Njezic <sf@maxempire.com> to match new LexPascal lexer and updated for Delphi 2009

filter.pascal=Pascal (dpr dpk pas dfm inc pp)|*.dpr;*.dpk;*.pas;*.dfm;*.inc;*.pp|

file.patterns.pascal=*.dpr;*.pas;*.dfm;*.inc;*.pp
file.patterns.pascal.package=*.dpk
file.patterns.pascal.all=$(file.patterns.pascal);$(file.patterns.pascal.package)
lexer.$(file.patterns.pascal.all)=pascal

keywordclass.pascal=absolute abstract and array as asm assembler automated begin case \
cdecl class const constructor deprecated destructor dispid dispinterface div do downto \
dynamic else end except export exports external far file final finalization finally for \
forward function goto if implementation in inherited initialization inline interface is \
label library message mod near nil not object of on or out overload override packed \
pascal platform private procedure program property protected public published raise \
record register reintroduce repeat resourcestring safecall sealed set shl shr static \
stdcall strict string then threadvar to try type unit unsafe until uses var varargs \
virtual while with xor

keywordclass.pascal.smart=add default implements index name nodefault read readonly \
remove stored write writeonly

keywordclass.pascal.package=package contains requires

keywords.$(file.patterns.pascal)=$(keywordclass.pascal) $(keywordclass.pascal.smart)
keywords.$(file.patterns.pascal.package)=$(keywordclass.pascal) $(keywordclass.pascal.smart) $(keywordclass.pascal.package)

# If enabled some keywords will only be highlightend in appropriate context.
# As implemented those are keywords related to property and DLL exports declarations
lexer.pascal.smart.highlighting=1

# Pascal styles

# Default
style.pascal.32=$(font.base)
# White space
style.pascal.0=fore:#808080
# Identifiers
style.pascal.1=
# Comment: { ... }
style.pascal.2=$(colour.code.comment.box),$(font.code.comment.box)
# Comment: (* ... *)
style.pascal.3=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: // ...
style.pascal.4=$(colour.code.comment.line),$(font.code.comment.line)
# Preprocessor: {$ ... }
style.pascal.5=$(colour.preproc)
# Preprocessor: (*$ ... *)
style.pascal.6=$(colour.preproc)
# Number
style.pascal.7=$(colour.number)
# Hex Number
style.pascal.8=$(colour.number)
# Keyword
style.pascal.9=$(colour.keyword),bold
# String
style.pascal.10=$(colour.string)
# End of line where string is not closed
style.pascal.11=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Character
style.pascal.12=$(colour.char)
# Operators
style.pascal.13=$(colour.operator),bold
# Inline Asm
style.pascal.14=fore:#804080

# Braces are only matched in operator style
braces.pascal.style=13



comment.block.pascal=//~
comment.stream.start.pascal={
comment.stream.end.pascal=}
comment.box.start.pascal=(*
comment.box.middle.pascal= *
comment.box.end.pascal= *)

statement.indent.$(file.patterns.pascal)=9 case class do else for then \
private protected public published repeat try while type
statement.end.$(file.patterns.pascal)=13 ;
statement.lookback.$(file.patterns.pascal)=20
block.start.$(file.patterns.pascal)=9 begin
block.end.$(file.patterns.pascal)=9 end

#using virtual pascal
#pc=C:\Vp21\Bin.w32\Vpc.exe -VC:\Vp21\Bin.w32\Vp.vpo "$(FilePath)"

#using free pascal

# compile
command.compile.*.pas=fpc "$(FilePath)"

# normal execute
if PLAT_WIN
	command.go.*.pas="$(FileName).exe"
	command.go.subsystem.*.pas=2
if PLAT_GTK
	command.go.*.pas="kvt -e $(FileName)"

# build
command.build.*.pas=fpc -B "$(FilePath)"
command.build.subsystem.*.pas=1

command.name.0.*.pas=Debug Compile
command.0.*.pas=fpc -g "$(FilePath)"
command.name.8.*.pas=Debug Build
command.8.*.pas=fpc -g -B "$(FilePath)"
command.name.2.*.pas=GDB
if PLAT_WIN
	command.2.*.pas=gdbpasw "$(FileName)"
if PLAT_GTK
	command.2.*.pas=gdb "$(FileName)"
	command.name.3.*.pas=DDD
	command.3.*.pas=ddd "$(FileName)"



##########============================================================
##ps.properties
##########============================================================
# Define SciTE settings for PostScript files.

file.patterns.ps=*.ps

filter.ps=PS (PostScript)|$(file.patterns.ps)|

lexer.$(file.patterns.ps)=ps

ps.tokenize=0
ps.level=3

comment.block.ps=%~

# Postscript level 1 operators
keywords.$(file.patterns.ps)=\
$error = == FontDirectory StandardEncoding UserObjects abs add aload \
anchorsearch and arc arcn arcto array ashow astore atan awidthshow begin bind \
bitshift bytesavailable cachestatus ceiling charpath clear cleardictstack \
cleartomark clip clippath closefile closepath concat concatmatrix copy copypage \
cos count countdictstack countexecstack counttomark currentcmykcolor \
currentcolorspace currentdash currentdict currentfile currentflat currentfont \
currentgray currenthsbcolor currentlinecap currentlinejoin currentlinewidth \
currentmatrix currentmiterlimit currentpagedevice currentpoint currentrgbcolor \
currentscreen currenttransfer cvi cvlit cvn cvr cvrs cvs cvx def defaultmatrix \
definefont dict dictstack div dtransform dup echo end eoclip eofill eq \
erasepage errordict exch exec execstack executeonly executive exit exp false \
file fill findfont flattenpath floor flush flushfile for forall ge get \
getinterval grestore grestoreall gsave gt idetmatrix idiv idtransform if ifelse \
image imagemask index initclip initgraphics initmatrix inustroke invertmatrix \
itransform known kshow le length lineto ln load log loop lt makefont mark \
matrix maxlength mod moveto mul ne neg newpath noaccess nor not null nulldevice \
or pathbbox pathforall pop print prompt pstack put putinterval quit rand rcheck \
rcurveto read readhexstring readline readonly readstring rectstroke repeat \
resetfile restore reversepath rlineto rmoveto roll rotate round rrand run save \
scale scalefont search setblackgeneration setcachedevice setcachelimit \
setcharwidth setcolorscreen setcolortransfer setdash setflat setfont setgray \
sethsbcolor setlinecap setlinejoin setlinewidth setmatrix setmiterlimit \
setpagedevice setrgbcolor setscreen settransfer setvmthreshold show showpage \
sin sqrt srand stack start status statusdict stop stopped store string \
stringwidth stroke strokepath sub systemdict token token transform translate \
true truncate type ueofill undefineresource userdict usertime version vmstatus \
wcheck where widthshow write writehexstring writestring xcheck xor

# Postscript level 2 operators
keywords2.$(file.patterns.ps)=\
GlobalFontDirectory ISOLatin1Encoding SharedFontDirectory UserObject arct \
colorimage cshow currentblackgeneration currentcacheparams currentcmykcolor \
currentcolor currentcolorrendering currentcolorscreen currentcolorspace \
currentcolortransfer currentdevparams currentglobal currentgstate \
currenthalftone currentobjectformat currentoverprint currentpacking \
currentpagedevice currentshared currentstrokeadjust currentsystemparams \
currentundercolorremoval currentuserparams defineresource defineuserobject \
deletefile execform execuserobject filenameforall fileposition filter \
findencoding findresource gcheck globaldict glyphshow gstate ineofill infill \
instroke inueofill inufill inustroke languagelevel makepattern packedarray \
printobject product realtime rectclip rectfill rectstroke renamefile \
resourceforall resourcestatus revision rootfont scheck selectfont serialnumber \
setbbox setblackgeneration setcachedevice2 setcacheparams setcmykcolor setcolor \
setcolorrendering setcolorscreen setcolorspace setcolortranfer setdevparams \
setfileposition setglobal setgstate sethalftone setobjectformat setoverprint \
setpacking setpagedevice setpattern setshared setstrokeadjust setsystemparams \
setucacheparams setundercolorremoval setuserparams setvmthreshold shareddict \
startjob uappend ucache ucachestatus ueofill ufill undef undefinefont \
undefineresource undefineuserobject upath ustroke ustrokepath vmreclaim \
writeobject xshow xyshow yshow

# Postscript level 3 operators
keywords3.$(file.patterns.ps)=\
cliprestore clipsave composefont currentsmoothness findcolorrendering \
setsmoothness shfill

# RIP-specific operators (Ghostscript)
keywords4.$(file.patterns.ps)=\
.begintransparencygroup .begintransparencymask .bytestring .charboxpath \
.currentaccuratecurves .currentblendmode .currentcurvejoin .currentdashadapt \
.currentdotlength .currentfilladjust2 .currentlimitclamp .currentopacityalpha \
.currentoverprintmode .currentrasterop .currentshapealpha \
.currentsourcetransparent .currenttextknockout .currenttexturetransparent \
.dashpath .dicttomark .discardtransparencygroup .discardtransparencymask \
.endtransparencygroup .endtransparencymask .execn .filename .filename \
.fileposition .forceput .forceundef .forgetsave .getbitsrect .getdevice \
.inittransparencymask .knownget .locksafe .makeoperator .namestring .oserrno \
.oserrorstring .peekstring .rectappend .runandhide .setaccuratecurves \
.setblendmode .setcurvejoin .setdashadapt .setdebug .setdefaultmatrix \
.setdotlength .setfilladjust2 .setlimitclamp .setmaxlength .setopacityalpha \
.setoverprintmode .setrasterop .setsafe .setshapealpha .setsourcetransparent \
.settextknockout .settexturetransparent .stringbreak .stringmatch .tempfile \
.type1decrypt .type1encrypt .type1execchar .unread arccos arcsin copydevice \
copyscanlines currentdevice finddevice findlibfile findprotodevice flushpage \
getdeviceprops getenv makeimagedevice makewordimagedevice max min \
putdeviceprops setdevice

# PostScript styles

#Default
style.ps.0=$(font.base)
# Comment
style.ps.1=$(colour.code.comment.line),$(font.code.comment.line)
# DSC comment
style.ps.2=$(colour.code.comment.doc),$(font.code.comment.doc)
# DSC comment value
style.ps.3=fore:#3060A0,$(font.code.comment.doc)
# Number
style.ps.4=$(colour.number)
# Name
style.ps.5=$(colour.operator)
# Keyword
style.ps.6=$(colour.keyword),bold
# Literal
style.ps.7=$(colour.preproc)
# Immediately evaluated literal
style.ps.8=$(colour.preproc),bold
# Array parenthesis
style.ps.9=$(colour.keyword)
# Dictionary parenthesis
style.ps.10=fore:#3060A0
# Procedure parenthesis
style.ps.11=$(colour.operator),bold
# Text
style.ps.12=$(colour.string),$(font.text)
# Hex string
style.ps.13=fore:#3F7F3F
# Base85 string
style.ps.14=$(colour.string)
# Bad string character
style.ps.15=$(colour.error)
# Braces are only matched in procedure parenthesis style
braces.ps.style=11

if PLAT_WIN
    command.go.*.ps=gswin32c "$(FileNameExt)"

if PLAT_GTK
    command.go.*.ps=gs "$(FileNameExt)"


##########============================================================
##sql.properties
##########============================================================
# Define SciTE settings for SQL and PL/SQL files.

filter.sql=SQL (sql)|*.sql|

file.patterns.sql=*.sql
file.patterns.plsql=*.spec;*.body;*.sps;*.spb;*.sf;*.sp

lexer.$(file.patterns.sql)=sql
lexer.$(file.patterns.plsql)=sql

# SQL styles
# White space
style.sql.0=fore:#808080
# Comment
style.sql.1=fore:#007F00,$(font.comment)
# Line Comment
style.sql.2=fore:#007F00,$(font.comment)
# Doc comment
style.sql.3=fore:#7F7F7F
# Number
style.sql.4=fore:#007F7F
# Keyword
style.sql.5=fore:#00007F,bold
# Double quoted string
style.sql.6=fore:#7F007F,$(font.monospace)
# Single quoted string
style.sql.7=fore:#7F007F,$(font.monospace)
# SQL*Plus
style.sql.8=$(colour.preproc)
# SQL*Plus PROMPT
style.sql.9=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Operators
style.sql.10=bold
# Identifiers
style.sql.11=
# End of line where string is not closed / not used
style.sql.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# SQL*Plus Comment
style.sql.13=fore:#007F00,$(font.comment)
# not used
# style.sql.14=
# Hash Line Comment
style.sql.15=fore:#007F00,$(font.comment)
# Keywords2: Database objects
style.sql.16=fore:#B00040
# Comment Doc Keyword
style.sql.17=fore:#3060A0,$(font.code.comment.doc)
# Comment Doc Keyword Error
style.sql.18=fore:#804020,$(font.code.comment.doc)
# Keywords5: User Keywords 1
style.sql.19=fore:#4B0082
# Keywords6: User Keywords 2
style.sql.20=fore:#B00040
# Keywords7: User Keywords 3
style.sql.21=fore:#8B0000
# Keywords8: User Keywords 4
style.sql.22=fore:#800080

# Braces are only matched in operator style
braces.sql.style=10
# Enables backslash as an escape character
#sql.backslash.escapes=1

# Activate '#' based comments for MySQL with 1 or disable for Oracle with 0:
#lexer.sql.numbersign.comment=0

# Set to 1 to colourise recognized words with dots
# (recommended for Oracle PL/SQL objects)
#lexer.sql.allow.dotted.word=1

keywords.$(file.patterns.sql)=\
absolute action add admin after aggregate \
alias all allocate alter and any are array as asc \
assertion at authorization \
before begin binary bit blob body boolean both breadth by \
call cascade cascaded case cast catalog char character \
check class clob close collate collation column commit \
completion connect connection constraint constraints \
constructor continue corresponding create cross cube current \
current_date current_path current_role current_time current_timestamp \
current_user cursor cycle \
data date day deallocate dec decimal declare default \
deferrable deferred delete depth deref desc describe descriptor \
destroy destructor deterministic dictionary diagnostics disconnect \
distinct domain double drop dynamic \
each else end end-exec equals escape every except \
exception exec execute exists exit external \
false fetch first float for foreign found from free full \
function \
general get global go goto grant group grouping \
having host hour \
identity if ignore immediate in indicator initialize initially \
inner inout input insert int integer intersect interval \
into is isolation iterate \
join \
key \
language large last lateral leading left less level like \
limit local localtime localtimestamp locator \
map match minute modifies modify module month \
names national natural nchar nclob new next no none \
not null numeric \
object of off old on only open operation option \
or order ordinality out outer output \
package pad parameter parameters partial path postfix precision prefix \
preorder prepare preserve primary \
prior privileges procedure public \
read reads real recursive ref references referencing relative \
restrict result return returns revoke right \
role rollback rollup routine row rows \
savepoint schema scroll scope search second section select \
sequence session session_user set sets size smallint some| space \
specific specifictype sql sqlexception sqlstate sqlwarning start \
state statement static structure system_user \
table temporary terminate than then time timestamp \
timezone_hour timezone_minute to trailing transaction translation \
treat trigger true \
under union unique unknown \
unnest update usage user using \
value values varchar variable varying view \
when whenever where with without work write \
year \
zone

keywords.$(file.patterns.plsql)=\
all alter and any array as asc at authid avg begin between \
binary_integer \
body boolean bulk by char char_base check close cluster collect \
comment commit compress connect constant create current currval \
cursor date day declare decimal default delete desc distinct \
do drop else elsif end exception exclusive execute exists exit \
extends false fetch float for forall from function goto group \
having heap hour if immediate in index indicator insert integer \
interface intersect interval into is isolation java level like \
limited lock long loop max min minus minute mlslabel mod mode \
month natural naturaln new nextval nocopy not nowait null number \
number_base ocirowid of on opaque open operator option or order \
organization others out package partition pctfree pls_integer \
positive positiven pragma prior private procedure public raise \
range raw real record ref release return reverse rollback row \
rowid rownum rowtype savepoint second select separate set share \
smallint space sql sqlcode sqlerrm start stddev subtype successful \
sum synonym sysdate table then time timestamp to trigger true \
type uid union unique update use user validate values varchar \
varchar2 variance view when whenever where while with work write \
year zone

# Keywords for PlDoc comments
keywords3.$(file.patterns.sql)=\
param author since return see deprecated todo

# Keywords for SQL*Plus
keywords4.$(file.patterns.sql)=\
acc~ept a~ppend archive log attribute \
bre~ak bti~tle \
c~hange cl~ear col~umn comp~ute conn~ect copy \
def~ine del desc~ribe disc~onnect \
e~dit exec~ute exit \
get \
help ho~st \
i~nput \
l~ist \
passw~ord pau~se pri~nt pro~mpt \
quit \
recover rem~ark repf~ooter reph~eader r~un \
sav~e set sho~w shutdown spo~ol sta~rt startup store \
timi~ng tti~tle \
undef~ine \
var~iable \
whenever oserror whenever sqlerror \

# User keywords 1
# Keywords for Standard packages
keywords5.$(file.patterns.sql)=\
dbms_output.disable dbms_output.enable dbms_output.get_line \
dbms_output.get_lines dbms_output.new_line dbms_output.put \
dbms_output.put_line \


##########============================================================
##tcl.properties
##########============================================================
# Define SciTE settings for tcl and itcl files.

file.patterns.tcl=*.tcl;*.exp
file.patterns.itcl=*.itcl
file.patterns.tcl.like=$(file.patterns.tcl);$(file.patterns.itcl);

filter.tcl=Tcl (tcl)|$(file.patterns.tcl)|
filter.itcl=itcl (itcl)|$(file.patterns.itcl)|

lexer.$(file.patterns.tcl)=tcl
lexer.$(file.patterns.itcl)=tcl

keywordclass.tcl=after append array auto_execok \
auto_import auto_load auto_load_index auto_qualify \
beep bgerror binary break case catch cd clock \
close concat continue dde default echo else elseif \
encoding eof error eval exec exit expr fblocked \
fconfigure fcopy file fileevent flush for foreach format \
gets glob global history http if incr info \
interp join lappend lindex linsert list llength load \
loadTk lrange lreplace lsearch lset lsort memory msgcat \
namespace open package pid pkg::create pkg_mkIndex Platform-specific proc \
puts pwd re_syntax read regexp registry regsub rename \
resource return scan seek set socket source split \
string subst switch tclLog tclMacPkgSearch tclPkgSetup tclPkgUnknown tell \
time trace unknown unset update uplevel upvar variable \
vwait while

keywordclass.tk=bell bind bindtags bitmap button canvas checkbutton clipboard \
colors console cursors destroy entry event focus font \
frame grab grid image Inter-client keysyms label labelframe \
listbox lower menu menubutton message option options pack \
panedwindow photo place radiobutton raise scale scrollbar selection \
send spinbox text tk tk_chooseColor tk_chooseDirectory tk_dialog tk_focusNext \
tk_getOpenFile tk_messageBox tk_optionMenu tk_popup tk_setPalette tkerror tkvars tkwait \
toplevel winfo wish wm

keywordclass.itcl=@scope body class code common component configbody \
constructor define destructor hull import inherit itcl itk itk_component \
itk_initialize itk_interior itk_option iwidgets keep method \
private protected public

keywordclass.TkCommands=tk_bisque tk_chooseColor tk_dialog tk_focusFollowsMouse tk_focusNext \
tk_focusPrev tk_getOpenFile tk_getSaveFile tk_messageBox tk_optionMenu \
tk_popup tk_setPalette tk_textCopy tk_textCut tk_textPaste \
tkButtonAutoInvoke tkButtonDown tkButtonEnter tkButtonInvoke tkButtonLeave \
tkButtonUp tkCancelRepeat tkCheckRadioDown tkCheckRadioEnter tkCheckRadioInvoke \
tkColorDialog tkColorDialog_BuildDialog tkColorDialog_CancelCmd tkColorDialog_Config tkColorDialog_CreateSelector \
tkColorDialog_DrawColorScale tkColorDialog_EnterColorBar tkColorDialog_HandleRGBEntry tkColorDialog_HandleSelEntry tkColorDialog_InitValues \
tkColorDialog_LeaveColorBar tkColorDialog_MoveSelector tkColorDialog_OkCmd tkColorDialog_RedrawColorBars tkColorDialog_RedrawFinalColor \
tkColorDialog_ReleaseMouse tkColorDialog_ResizeColorBars tkColorDialog_RgbToX tkColorDialog_SetRGBValue tkColorDialog_StartMove \
tkColorDialog_XToRgb tkConsoleAbout tkConsoleBind tkConsoleExit tkConsoleHistory \
tkConsoleInit tkConsoleInsert tkConsoleInvoke tkConsoleOutput tkConsolePrompt \
tkConsoleSource tkDarken tkEntryAutoScan tkEntryBackspace tkEntryButton1 \
tkEntryClosestGap tkEntryGetSelection tkEntryInsert tkEntryKeySelect tkEntryMouseSelect \
tkEntryNextWord tkEntryPaste tkEntryPreviousWord tkEntrySeeInsert tkEntrySetCursor \
tkEntryTranspose tkEventMotifBindings tkFDGetFileTypes tkFirstMenu tkFocusGroup_BindIn \
tkFocusGroup_BindOut tkFocusGroup_Create tkFocusGroup_Destroy tkFocusGroup_In tkFocusGroup_Out \
tkFocusOK tkGenerateMenuSelect tkIconList tkIconList_Add tkIconList_Arrange \
tkIconList_AutoScan tkIconList_Btn1 tkIconList_Config tkIconList_Create tkIconList_CtrlBtn1 \
tkIconList_Curselection tkIconList_DeleteAll tkIconList_Double1 tkIconList_DrawSelection tkIconList_FocusIn \
tkIconList_FocusOut tkIconList_Get tkIconList_Goto tkIconList_Index tkIconList_Invoke \
tkIconList_KeyPress tkIconList_Leave1 tkIconList_LeftRight tkIconList_Motion1 tkIconList_Reset \
tkIconList_ReturnKey tkIconList_See tkIconList_Select tkIconList_Selection tkIconList_ShiftBtn1 \
tkIconList_UpDown tkListbox tkListboxAutoScan tkListboxBeginExtend tkListboxBeginSelect \
tkListboxBeginToggle tkListboxCancel tkListboxDataExtend tkListboxExtendUpDown tkListboxKeyAccel_Goto \
tkListboxKeyAccel_Key tkListboxKeyAccel_Reset tkListboxKeyAccel_Set tkListboxKeyAccel_Unset tkListboxMotion \
tkListboxSelectAll tkListboxUpDown tkMbButtonUp tkMbEnter tkMbLeave \
tkMbMotion tkMbPost tkMenuButtonDown tkMenuDownArrow tkMenuDup \
tkMenuEscape tkMenuFind tkMenuFindName tkMenuFirstEntry tkMenuInvoke \
tkMenuLeave tkMenuLeftArrow tkMenuMotion tkMenuNextEntry tkMenuNextMenu \
tkMenuRightArrow tkMenuUnpost tkMenuUpArrow tkMessageBox tkMotifFDialog \
tkMotifFDialog_ActivateDList tkMotifFDialog_ActivateFEnt tkMotifFDialog_ActivateFList tkMotifFDialog_ActivateSEnt tkMotifFDialog_BrowseDList \
tkMotifFDialog_BrowseFList tkMotifFDialog_BuildUI tkMotifFDialog_CancelCmd tkMotifFDialog_Config tkMotifFDialog_Create \
tkMotifFDialog_FileTypes tkMotifFDialog_FilterCmd tkMotifFDialog_InterpFilter tkMotifFDialog_LoadFiles tkMotifFDialog_MakeSList \
tkMotifFDialog_OkCmd tkMotifFDialog_SetFilter tkMotifFDialog_SetListMode tkMotifFDialog_Update tkPostOverPoint \
tkRecolorTree tkRestoreOldGrab tkSaveGrabInfo tkScaleActivate tkScaleButton2Down \
tkScaleButtonDown tkScaleControlPress tkScaleDrag tkScaleEndDrag tkScaleIncrement \
tkScreenChanged tkScrollButton2Down tkScrollButtonDown tkScrollButtonDrag tkScrollButtonUp \
tkScrollByPages tkScrollByUnits tkScrollDrag tkScrollEndDrag tkScrollSelect \
tkScrollStartDrag tkScrollTopBottom tkScrollToPos tkTabToWindow tkTearOffMenu \
tkTextAutoScan tkTextButton1 tkTextClosestGap tkTextInsert tkTextKeyExtend \
tkTextKeySelect tkTextNextPara tkTextNextPos tkTextNextWord tkTextPaste \
tkTextPrevPara tkTextPrevPos tkTextPrevWord tkTextResetAnchor tkTextScrollPages \
tkTextSelectTo tkTextSetCursor tkTextTranspose tkTextUpDownLine tkTraverseToMenu \
tkTraverseWithinMenu

keywords.$(file.patterns.tcl.like)=$(keywordclass.tcl) 
keywords2.$(file.patterns.tcl.like)=$(keywordclass.tk)
keywords3.$(file.patterns.tcl.like)= $(keywordclass.TkCommands)
keywords4.$(file.patterns.itcl)=$(keywordclass.itcl) 
keywords5.$(file.patterns.tcl.like)=expand

comment.block.tcl=#~
# also suported is #- for start/end of box, box.middle # can be in column 1
comment.box.start.tcl=##
comment.box.middle.tcl= #
comment.box.end.tcl= ##

# tcl styles
# Default
style.tcl.32=$(font.base)
# White space
style.tcl.0=fore:#808080
# Comment:.....; #comment
style.tcl.1=$(colour.code.comment.line),$(font.comment),back:#f0FFE0
# Line Comment:  #comment
style.tcl.2=$(colour.code.comment.line),$(font.code.comment.line)
# Number and hex number (syntax #[0-f]+)
style.tcl.3=$(colour.number)
# Keyword in quote
style.tcl.4=$(colour.string),bold,back:#FFF0F0
# In quote
style.tcl.5=$(colour.string),back:#FFf0f0,eolfilled
# operator
style.tcl.6=$(colour.operator),bold
# Identifiers
style.tcl.7=$(colour.keyword)
# Substitution
style.tcl.8=$(colour.preproc)
# Substitution starts with a brace ${woow}
style.tcl.9=$(colour.preproc),back:#effff0
# Modifier -xxx
style.tcl.10=$(colour.char)
# Expand (what and odd syntax)
style.tcl.11=$(colour.keyword),back:#FFFF80,bold
# Keywords
style.tcl.12=$(colour.keyword),bold
# Keywords 2
style.tcl.13=$(colour.keyword),back:#e0ffff,bold
# Keywords 3
style.tcl.14=$(colour.keyword),back:#FFf0f0,bold
# Keywords 4
style.tcl.15=$(colour.keyword),back:#FFD0D0,bold
# Other keywords (bozo test colors :-)
# Keywords 5
style.tcl.16=$(style.tcl.7),back:#FFD0FF,bold
# Keywords 6
style.tcl.17=$(style.tcl.7),back:#FFFFD0,bold
# Keywords 7
style.tcl.18=$(style.tcl.7),back:#FFA0A0,bold,
# Keywords 8
style.tcl.19=$(style.tcl.7),back:#FFD0D0
#comment box
style.tcl.20=$(colour.code.comment.box),$(font.code.comment.box),back:#f0FFf0,eolfilled
#comment block
style.tcl.21=$(colour.embedded.comment),$(font.embedded.comment),back:#f0FFf0

# Matched Operators
style.tcl.34=fore:#f0f0f0,bold,back:#7070ff
style.tcl.35=fore:#FF0000,bold,back:#FF00FF

# Braces are only matched in operator style
braces.tcl.style=6


##########============================================================
##yaml.properties
##########============================================================
# Define SciTE settings for YAML files.

# associate YAML file patter with the YAML lexer
file.patterns.yaml=*.yaml;*.yml
filter.yaml=YAML (yaml)|$(file.patterns.yaml)|
lexer.$(file.patterns.yaml)=yaml

# YAML requires spaces for tabs
tabsize.$(file.patterns.yaml)=2
indent.size.$(file.patterns.yaml)=2
use.tabs.$(file.patterns.yaml)=0

# YAML comment character
comment.block.yaml=#~

# YAML convertible values
keywords.$(file.patterns.yaml)=true false yes no

# YAML font styles
# default
style.yaml.0=$(font.text),fore:#000000
# comment line
style.yaml.1=$(font.comment),fore:#008800
# value identifier
style.yaml.2=$(font.base),fore:#000088,bold
# keyword value
style.yaml.3=$(font.base),fore:#880088
# numerical value
style.yaml.4=$(font.base),fore:#880000
# reference/repeating value
style.yaml.5=$(font.base),fore:#008888
# document delimiting line
style.yaml.6=$(font.comment),fore:#FFFFFF,bold,back:#000088,eolfilled
# text block marker
style.yaml.7=$(font.text),fore:#333366
# syntax error marker
style.yaml.8=$(font.text),fore:#FFFFFF,italics,bold,back:#FF0000,eolfilled


##########============================================================
##tex.properties
##########============================================================
# file    : tex.properties
# version : 18 august 2003
# author  : Hans Hagen / PRAGMA ADE / www.pragma-ade.com

# TeX users may want to use the Latin Modern Typewriter font:
#
#   font.monospace=font:LMTypewriter10,size:16.5
#   font.errorfont=font:LMTypewriter10,size:11.5
#
# These and more presets are done in context.properties.

# TeX: patterns

file.patterns.tex=*.tex;*.sty
file.patterns.latex=*.tex;*.sty;*.aux;*.toc;*.idx
file.patterns.context=*.tex;*.tui;*.tuo;*.sty

# filter to be checked/tested:

filter.context=TeX|$(file.patterns.tex)|
filter.context=LaTeX|$(file.patterns.latex)|
filter.context=ConTeXt|$(file.patterns.context)|

lexer.$(file.patterns.tex)=tex
lexer.$(file.patterns.latex)=tex
lexer.$(file.patterns.context)=tex

# TeX: commands (check process view)

command.compile.$(file.patterns.tex)=
command.build.$(file.patterns.tex)=tex $(FileNameExt)
command.go.$(file.patterns.tex)=gv $(FileName).pdf

command.compile.$(file.patterns.latex)=
command.build.$(file.patterns.latex)=pdflatex $(FileNameExt)
command.go.$(file.patterns.latex)=gv $(FileName).pdf

command.compile.$(file.patterns.context)=
command.build.$(file.patterns.context)=texexec --pdf $(FileNameExt)
command.go.$(file.patterns.context)=gv $(FileName).pdf

command.0.$(file.patterns.tex)=
command.1.$(file.patterns.tex)=
command.2.$(file.patterns.tex)=
command.3.$(file.patterns.tex)=
command.4.$(file.patterns.tex)=
command.5.$(file.patterns.tex)=
command.6.$(file.patterns.tex)=
command.7.$(file.patterns.tex)=
command.8.$(file.patterns.tex)=
command.9.$(file.patterns.tex)=

command.0.$(file.patterns.latex)=
command.1.$(file.patterns.latex)=
command.2.$(file.patterns.latex)=
command.3.$(file.patterns.latex)=
command.4.$(file.patterns.latex)=
command.5.$(file.patterns.latex)=
command.6.$(file.patterns.latex)=
command.7.$(file.patterns.latex)=
command.8.$(file.patterns.latex)=
command.9.$(file.patterns.latex)=

command.0.$(file.patterns.context)=
command.1.$(file.patterns.context)=
command.2.$(file.patterns.context)=
command.3.$(file.patterns.context)=
command.4.$(file.patterns.context)=
command.5.$(file.patterns.context)=
command.6.$(file.patterns.context)=
command.7.$(file.patterns.context)=
command.8.$(file.patterns.context)=
command.9.$(file.patterns.context)=

# TeX: highlighting

# Default
style.tex.0=fore:#3F3F3F
# Special
style.tex.1=fore:#007F7F
# Group
style.tex.2=fore:#7F0000
# Symbol
style.tex.3=fore:#7F7F00
# Command
style.tex.4=fore:#007F00
# Text
# style.tex.5=fore:#000000

style.tex.34=fore:#00007F
style.tex.35=fore:#7F007F

# TeX: comments

comment.block.tex=%
comment.block.at.line.start.tex=1

# TeX: lexer.tex.interface.default
#
# 0 all \commands
# 1 tex etex pdftex omega primitives
# 2 context nl (when context.properties is loaded)
# 3 context en (when context.properties is loaded)
# 4 context de (when context.properties is loaded)
# 5 context cz (when context.properties is loaded)
# 6 context it (when context.properties is loaded)
# 7 context ro (when context.properties is loaded)
# 8 latex (no keywords yet; will move up)
#
# first lines of a tex file are interpreted as follows
#
# % interface=all|nl|en|de|cz|it|ro|latex

lexer.tex.interface.default=0

# TeX: lexer.tex.use.keywords
#
# 0 don't use keyword lists
# 1 use keyword lists

lexer.tex.use.keywords=1

# TeX: lexer.tex.comment.process
#
# 0 don't interpret comment
# 1 color comment like source code

lexer.tex.comment.process=0

# TeX: lexer.tex.auto.if
#
# 0 don't handle \if<unknown>
# 1 treat \if<unknown> as command

lexer.tex.auto.if=1

# TeX: keywords (incomplete, just for testing and as example)

keywordclass.primitives.tex=\
    above abovedisplayshortskip abovedisplayskip \
    abovewithdelims accent adjdemerits advance afterassignment \
    aftergroup atop atopwithdelims \
    badness baselineskip batchmode begingroup \
    belowdisplayshortskip belowdisplayskip binoppenalty botmark \
    box boxmaxdepth brokenpenalty \
    catcode char chardef cleaders closein closeout clubpenalty \
    copy count countdef cr crcr csname \
    day deadcycles def defaulthyphenchar defaultskewchar \
    delcode delimiter delimiterfactor delimeters \
    delimitershortfall delimeters dimen dimendef discretionary \
    displayindent displaylimits displaystyle \
    displaywidowpenalty displaywidth divide \
    doublehyphendemerits dp dump \
    edef else emergencystretch end endcsname endgroup endinput \
    endlinechar eqno errhelp errmessage errorcontextlines \
    errorstopmode escapechar everycr everydisplay everyhbox \
    everyjob everymath everypar everyvbox exhyphenpenalty \
    expandafter  \
    fam fi finalhyphendemerits firstmark floatingpenalty font \
    fontdimen fontname futurelet \
    gdef global group globaldefs \
    halign hangafter hangindent hbadness hbox hfil horizontal \
    hfill horizontal hfilneg hfuzz hoffset holdinginserts hrule \
    hsize hskip hss horizontal ht hyphenation hyphenchar \
    hyphenpenalty hyphen \
    if ifcase ifcat ifdim ifeof iffalse ifhbox ifhmode ifinner \
    ifmmode ifnum ifodd iftrue ifvbox ifvmode ifvoid ifx \
    ignorespaces immediate indent input inputlineno input \
    insert insertpenalties interlinepenalty \
    jobname \
    kern \
    language lastbox lastkern lastpenalty lastskip lccode \
    leaders left lefthyphenmin leftskip leqno let limits \
    linepenalty line lineskip lineskiplimit long looseness \
    lower lowercase \
    mag mark mathaccent mathbin mathchar mathchardef mathchoice \
    mathclose mathcode mathinner mathop mathopen mathord \
    mathpunct mathrel mathsurround maxdeadcycles maxdepth \
    meaning medmuskip message mkern month moveleft moveright \
    mskip multiply muskip muskipdef \
    newlinechar noalign noboundary noexpand noindent nolimits \
    nonscript scriptscript nonstopmode nulldelimiterspace \
    nullfont number \
    omit openin openout or outer output outputpenalty over \
    overfullrule overline overwithdelims \
    pagedepth pagefilllstretch pagefillstretch pagefilstretch \
    pagegoal pageshrink pagestretch pagetotal par parfillskip \
    parindent parshape parskip patterns pausing penalty \
    postdisplaypenalty predisplaypenalty predisplaysize \
    pretolerance prevdepth prevgraf \
    radical raise read relax relpenalty right righthyphenmin \
    rightskip romannumeral \
    scriptfont scriptscriptfont scriptscriptstyle scriptspace \
    scriptstyle scrollmode setbox setlanguage sfcode shipout \
    show showbox showboxbreadth showboxdepth showlists showthe \
    skewchar skip skipdef spacefactor spaceskip span special \
    splitbotmark splitfirstmark splitmaxdepth splittopskip \
    string \
    tabskip textfont textstyle the thickmuskip thinmuskip time \
    toks toksdef tolerance topmark topskip tracingcommands \
    tracinglostchars tracingmacros tracingonline tracingoutput \
    tracingpages tracingparagraphs tracingrestores tracingstats \
    uccode uchyph underline unhbox unhcopy unkern unpenalty \
    unskip unvbox unvcopy uppercase \
    vadjust valign vbadness vbox vcenter vfil vfill vfilneg \
    vfuzz voffset vrule vsize vskip vsplit vss vtop \
    wd widowpenalty write \
    xdef xleaders xspaceskip \
    year

keywordclass.primitives.etex=\
    beginL beginR botmarks \
    clubpenalties currentgrouplevel currentgrouptype \
    currentifbranch currentiflevel currentiftype \
    detokenize dimexpr displaywidowpenalties \
    endL endR eTeXrevision eTeXversion everyeof \
    firstmarks fontchardp fontcharht fontcharic fontcharwd \
    glueexpr glueshrink glueshrinkorder gluestretch \
    gluestretchorder gluetomu \
    ifcsname ifdefined iffontchar interactionmode \
    interactionmode interlinepenalties \
    lastlinefit lastnodetype \
    marks topmarks middle muexpr mutoglue \
    numexpr \
    pagediscards parshapedimen parshapeindent parshapelength \
    predisplaydirection \
    savinghyphcodes savingvdiscards scantokens showgroups \
    showifs showtokens splitdiscards splitfirstmarks \
    TeXXeTstate tracingassigns tracinggroups tracingifs \
    tracingnesting tracingscantokens \
    unexpanded unless \
    widowpenalties

keywordclass.primitives.pdftex=\
    pdfadjustspacing pdfannot pdfavoidoverfull \
    pdfcatalog pdfcompresslevel \
    pdfdecimaldigits pdfdest pdfdestmargin \
    pdfendlink pdfendthread \
    pdffontattr pdffontexpand pdffontname pdffontobjnum pdffontsize \
    pdfhorigin \
    pdfimageresolution pdfincludechars pdfinfo \
    pdflastannot pdflastdemerits pdflastobj \
    pdflastvbreakpenalty pdflastxform pdflastximage \
    pdflastximagepages pdflastxpos pdflastypos \
    pdflinesnapx pdflinesnapy pdflinkmargin pdfliteral \
    pdfmapfile pdfmaxpenalty pdfminpenalty pdfmovechars \
    pdfnames \
    pdfobj pdfoptionpdfminorversion pdfoutline pdfoutput \
    pdfpageattr pdfpageheight pdfpageresources pdfpagesattr \
    pdfpagewidth pdfpkresolution pdfprotrudechars \
    pdfrefobj pdfrefxform pdfrefximage \
    pdfsavepos pdfsnaprefpoint pdfsnapx pdfsnapy pdfstartlink \
    pdfstartthread \
    pdftexrevision pdftexversion pdfthread pdfthreadmargin \
    pdfuniqueresname \
    pdfvorigin \
    pdfxform pdfximage

keywordclass.primitives.omega=\
    odelimiter omathaccent omathchar oradical omathchardef omathcode odelcode \
    leftghost rightghost \
    charwd charht chardp charit \
    localleftbox localrightbox \
    localinterlinepenalty localbrokenpenalty \
    pagedir bodydir pardir textdir mathdir \
    boxdir nextfakemath \
    pagewidth pageheight pagerightoffset pagebottomoffset \
    nullocp nullocplist ocp externalocp ocplist pushocplist popocplist clearocplists ocptracelevel \
    addbeforeocplist addafterocplist removebeforeocplist removeafterocplist \
    OmegaVersion \
    InputTranslation OutputTranslation DefaultInputTranslation DefaultOutputTranslation \
    noInputTranslation noOutputTranslation \
    InputMode OutputMode DefaultInputMode DefaultOutputMode \
    noInputMode noOutputMode noDefaultInputMode noDefaultOutputMode

# only the macros that make sense:

keywordclass.macros.plain.partial=\
    TeX \
    bgroup egroup endgraf space empty null \
    newcount newdimen newskip newmuskip newbox newtoks newhelp newread newwrite newfam newlanguage newinsert newif \
    maxdimen magstephalf magstep \
    frenchspacing nonfrenchspacing normalbaselines obeylines obeyspaces raggedright ttraggedright \
    thinspace negthinspace enspace enskip quad qquad \
    smallskip medskip bigskip removelastskip topglue vglue hglue \
    break nobreak allowbreak filbreak goodbreak smallbreak medbreak bigbreak \
    line leftline rightline centerline rlap llap underbar strutbox strut \
    cases matrix pmatrix bordermatrix eqalign displaylines eqalignno leqalignno \
    pageno folio tracingall showhyphens fmtname fmtversion \
    hphantom vphantom phantom smash

keywordclass.macros.eplain.partial=\
    eTeX \
    newmarks grouptype interactionmode nodetype iftype \
    tracingall loggingall tracingnone

# for fun

keywordclass.primitives.pdftex.experimental=

keywordclass.primitives.all=\
    $(keywordclass.primitives.tex) \
    $(keywordclass.primitives.etex) \
    $(keywordclass.primitives.pdftex) \
    $(keywordclass.primitives.pdftex.experimental) \
    $(keywordclass.primitives.omega)

# hooks for context

keywordclass.macros.context.undocumented.en=
keywordclass.macros.context.undocumented.nl=
keywordclass.macros.context.undocumented.de=
keywordclass.macros.context.undocumented.cz=
keywordclass.macros.context.undocumented.it=
keywordclass.macros.context.undocumented.ro=

keywordclass.macros.context.extras=

keywordclass.macros.context.nl=
keywordclass.macros.context.en=
keywordclass.macros.context.de=
keywordclass.macros.context.cz=
keywordclass.macros.context.it=
keywordclass.macros.context.ro=

import cont-en-scite
import cont-nl-scite
import cont-de-scite
import cont-cz-scite
import cont-it-scite
import cont-ro-scite

import cont-xx-scite

# hooks for latex (file should define keywordclass.macros.latex.all)

keywordclass.macros.latex.all=

import latex-scite

# collections

keywordclass.tex.all=\
    $(keywordclass.primitives.tex) \
    $(keywordclass.macros.plain.partial)

keywordclass.etex.all=\
    $(keywordclass.primitives.tex) \
    $(keywordclass.primitives.etex) \
    $(keywordclass.macros.plain.partial) \
    $(keywordclass.macros.eplain.partial)

keywordclass.latex.all=\
    $(keywordclass.primitives.tex) \
    $(keywordclass.primitives.etex) \
    $(keywordclass.macros.latex.all)

keywordclass.pdflatex.all=\
    $(keywordclass.primitives.tex) \
    $(keywordclass.primitives.etex) \
    $(keywordclass.primitives.pdftex) \
    $(keywordclass.macros.latex.all)

# we can't use $(keywordclass.primitives.all) here due to some kind of
# limitation in nesting

keywordclass.context.base=\
    $(keywordclass.primitives.tex) \
    $(keywordclass.primitives.etex) \
    $(keywordclass.primitives.pdftex) \
    $(keywordclass.primitives.pdftex.experimental) \
    $(keywordclass.primitives.omega) \
    $(keywordclass.macros.plain.partial) \
    $(keywordclass.macros.eplain.partial)

keywordclass.context.all=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.en) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.en)

keywordclass.context.all.nl=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.nl) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.nl)

keywordclass.context.all.en=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.en) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.en)

keywordclass.context.all.de=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.de) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.de)

keywordclass.context.all.cz=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.cz) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.cz)

keywordclass.context.all.it=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.it) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.it)

keywordclass.context.all.ro=\
    $(keywordclass.context.base) \
    $(keywordclass.macros.context.ro) \
    $(keywordclass.macros.context.extras) \
    $(keywordclass.macros.context.undocumented.ro)

# hm

keywords.$(file.patterns.tex)=$(keywordclass.tex.all)
keywords.$(file.patterns.latex)=$(keywordclass.latex.all)
keywords.$(file.patterns.context)=$(keywordclass.context.all)

# keywords1 is not used since scintilla takes it from 'keywords'

keywords.$(file.patterns.context)=$(keywordclass.context.base)

keywords2.$(file.patterns.context)=$(keywordclass.context.all.nl)
keywords3.$(file.patterns.context)=$(keywordclass.context.all.en)
keywords4.$(file.patterns.context)=$(keywordclass.context.all.de)
keywords5.$(file.patterns.context)=$(keywordclass.context.all.cz)
keywords6.$(file.patterns.context)=$(keywordclass.context.all.it)
keywords7.$(file.patterns.context)=$(keywordclass.context.all.ro)

# keywords71.$(file.patterns.context)=$(keywordclass.tex.all)
# keywords72.$(file.patterns.context)=$(keywordclass.etex.all)
# keywords73.$(file.patterns.context)=$(keywordclass.pdftex.all)
# keywords74.$(file.patterns.context)=$(keywordclass.pdfetex.all)
#
# keywords91.$(file.patterns.context)=$(keywordclass.latex.all)

# for the moment LaTeX gets slot 8, but we will move it up as soon as
# more keyword lists can be defined

keywords8.$(file.patterns.context)=$(keywordclass.pdflatex.all)

# TeX: words

word.characters.$(file.patterns.tex)=$(chars.alpha)$(chars.numeric)$(chars.accented)\@
word.characters.$(file.patterns.latex)=$(chars.alpha)$(chars.numeric)$(chars.accented)\@
word.characters.$(file.patterns.context)=$(chars.alpha)$(chars.numeric)$(chars.accented)\@!?

# TeX: end of file


##########============================================================
##latex.properties
##########============================================================
# Define SciTE settings for LaTeX files.

file.patterns.latex=*.tex;*.sty

filter.latex=LaTeX (tex sty)|$(file.patterns.latex)|

lexer.$(file.patterns.latex)=latex

# LaTeX styles
# White space
style.latex.0=fore:#000000
# Command
style.latex.1=fore:#AA0000,bold
# Tag
style.latex.2=fore:#880088,bold
# Math
style.latex.3=fore:#0000FF
# Comment
style.latex.4=fore:#00AA00

command.compile.*.tex=latex $(FileNameExt)
command.build.*.tex=dvips -f $(FileName).dvi > $(FileName).ps
command.go.*.tex=dvips $(FileName).dvi

command.name.0.*.tex=View
command.0.*.tex=xdvi $(FileName).dvi
command.name.8.*.tex=View PS
command.8.*.tex=gv $(FileName).ps


