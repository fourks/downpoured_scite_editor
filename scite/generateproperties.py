
class Bucket(): pass
Subsys = Bucket()
Subsys.exec_wait = 0 #(console) Command line programs. Do not use for GUI programs as their windows will not be visible.
Subsys.windows = 1 #Programs that create their own windows
Subsys.exec_async = 2 #(shell) A good way to open HTML files and similar as it handles this similarly to a user opening the file from the shell.
Subsys.script = 3 #
Subsys.htmlhelp = 4 # Open in HtmlHelp program
Subsys.winhelp = 5 #Open with WinHelp function

# a 'filter' modifies the current file 
#supported only on windows is command.quiet

# note: it might be possible to use this without a python extension, due to
# command.input.0.*.cc=$(CurrentSelection) or currentword and so on., replaceselection , etc
#~ ScApp.SetProperty('command.name.38.*', 'Python new')

import os

class GenProperties():
	currentIndex = 30
	arLines = None
	def __init__(self): self.arLines = []
	def reg(self, sShortcut, sName, sCommand, sFiletype='*', subsys=Subsys.exec_async, savebefore=False, n=None):
		i = n if n else self.currentIndex
		self.arLines.append('')
		self.arLines.append('command.name.%d.%s=%s'%(i, sFiletype,sName))
		self.arLines.append('command.subsystem.%d.%s=%d'%(i, sFiletype,subsys))
		if sShortcut:
			self.arLines.append('command.shortcut.%d.%s=%s'%(i, sFiletype,sShortcut))
		self.arLines.append('command.%d.%s=%s'%(i, sFiletype,sCommand))
		if not savebefore:
			self.arLines.append('command.mode.%d.%s=savebefore:no'%(i, sFiletype))
		
		if not n: self.currentIndex += 1
	
	def regpy(self, sShortcut, sName, sCommand, sFiletype='*', subsys=Subsys.script, savebefore=False):
		if 'plugins' in sCommand: sCommand = 'import plugins; '+sCommand
		return self.reg(sShortcut=sShortcut,sName=sName,sCommand=sCommand,sFiletype=sFiletype,
			subsys=subsys, savebefore=savebefore)
	def addraw(self, s):
		self.arLines.append('')
		self.arLines.append(s)
		
	def write(self):
		target = os.path.join('properties', 'pyplugin_generated.properties')
		if not os.path.exists(target):
			print "Error: can't find "+target
			return
		f=open(target,'w')
		f.write('#Warning: this file is automatically generated\n')
		f.write('#Manual edits will be discarded\n')
		for line in self.arLines:
			print line.strip()
			f.write(line)
			f.write('\n')
		f.close()

gen = GenProperties()

gen.currentIndex = 30
# basic commands (which subsystem?)
gen.reg(None,'copyfilepath', r'"$(pyplugin.lnzpath)" "$(SciteDefaultHome)\..\btools\setclip.jsz" "$(FileDir)"', subsys=Subsys.exec_async, n=1)


# text-processing commands
gen.regpy('Ctrl+Alt+l','Clearnewlines', 'plugins.deleteNewlines()')
gen.regpy('Ctrl+Alt+r','Magicreplace', 'plugins.magicReplace()')
gen.regpy('Ctrl+Alt+h','Switchheader', 'plugins.switchCppHeader()')
gen.regpy('','PutArgsOnNewlines', 'plugins.putArgsOnNewlines()')

gen.regpy('Ctrl+Shift+|','Importprintval', 'plugins.importprintval()')
gen.regpy('Ctrl+|','Useprintval', 'plugins.useprintval()')

# search index. if only whitespace selected, prompt 
gen.regpy('F12','IndexedImpl', 'plugins.SciteSearchSip("IndexedImpl")',sFiletype='$(file.patterns.c.like)')
gen.regpy('Shift+F12','IndexedDefn', 'plugins.SciteSearchSip("IndexedDefn")',sFiletype='$(file.patterns.c.like)')
gen.regpy('Alt+F12','IndexedUsage', 'plugins.SciteSearchSip("IndexedOther")',sFiletype='$(file.patterns.c.like)')
gen.regpy('Ctrl+F12','IndexedAll', 'plugins.SciteSearchSip("IndexedAll")',sFiletype='$(file.patterns.c.like)')
gen.regpy('Alt+Shift+F12','PromptToggle', 'plugins.SciteSearchSipToggle()',sFiletype='$(file.patterns.c.like)')
#also prints things out
gen.regpy('Ctrl+Alt+Shift+F12','IndexRebuild', 'plugins.SciteSearchSipRebuild()',sFiletype='$(file.patterns.c.like)')

# search not indexed. if only whitespace selected, prompt 
gen.regpy('Alt+F3','NotIndexedWholeword', 'plugins.SciteSearchSip("NotIndexedWhole")',sFiletype='$(file.patterns.c.like)')
gen.regpy('Alt+Shift+F3','NotIndexedNotWholeword', 'plugins.SciteSearchSip("NotIndexedNotWhole")',sFiletype='$(file.patterns.c.like)')

# disabled:
# gen.reg(None,'AwesomeFileBrowse',"$(pyplugin.toolpath)\externfilebrowse\externfilebrowse.exe", n=7)

#ccc build
gen.addraw('lexer.*.ccc=cpp')
gen.addraw(r'command.go.*.ccc=$(pyplugin.pypath) C:\fastdev\fastpixel\fastpixel_v2\build\build.py "$(FilePath)"')
gen.addraw('lexer.*.cold=cpp')
gen.addraw(r'command.go.*.cold=$(pyplugin.pypath) C:\fastdev\fastpixel\fastpixel_v2\fastpixel_cold_previous\python\generate.py "$(FilePath)"')


print 'What was written:'
gen.write()
